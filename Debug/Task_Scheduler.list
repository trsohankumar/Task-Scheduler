
Task_Scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d50  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08000ee8  08000ee8  00001ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f28  08000f28  0000206c  2**0
                  CONTENTS
  4 .ARM          00000000  08000f28  08000f28  0000206c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f28  08000f28  0000206c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f28  08000f28  00001f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000f2c  08000f2c  00001f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08000f30  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  2000006c  08000f9c  0000206c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  08000f9c  000021ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000206c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000ab7  00000000  00000000  0000209c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003c6  00000000  00000000  00002b53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000170  00000000  00000000  00002f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000101  00000000  00000000  00003090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002be5  00000000  00000000  00003191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000014ac  00000000  00000000  00005d76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009a4d  00000000  00000000  00007222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00010c6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b10  00000000  00000000  00010cb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000117c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000006c 	.word	0x2000006c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000ed0 	.word	0x08000ed0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000070 	.word	0x20000070
 80001d4:	08000ed0 	.word	0x08000ed0

080001d8 <main>:

uint32_t psp_of_tasks[MAX_TASKS] = {TASK_1_STACK_START, TASK_2_STACK_START, TASK_3_STACK_START, TASK_4_STACK_START};
uint32_t task_handlers[MAX_TASKS];

int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0

	// initialize the scheduler
	init_scheduler_stack(SCHED_STACK_START);
 80001dc:	4807      	ldr	r0, [pc, #28]	@ (80001fc <main+0x24>)
 80001de:	f000 f84d 	bl	800027c <init_scheduler_stack>

	// initialize all the stack framses
	init_task_stack();
 80001e2:	f000 f851 	bl	8000288 <init_task_stack>

	init_systick_timer(TICK_HZ);
 80001e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001ea:	f000 f811 	bl	8000210 <init_systick_timer>


	switch_sp_to_psp();
 80001ee:	f000 f8a7 	bl	8000340 <switch_sp_to_psp>


	task1_handler();
 80001f2:	f000 f805 	bl	8000200 <task1_handler>

    /* Loop forever */
	for(;;);
 80001f6:	bf00      	nop
 80001f8:	e7fd      	b.n	80001f6 <main+0x1e>
 80001fa:	bf00      	nop
 80001fc:	2001f000 	.word	0x2001f000

08000200 <task1_handler>:
}


void task1_handler(void) {
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0

	for(;;){

		printf("This is Task1\n");
 8000204:	4801      	ldr	r0, [pc, #4]	@ (800020c <task1_handler+0xc>)
 8000206:	f000 facf 	bl	80007a8 <puts>
 800020a:	e7fb      	b.n	8000204 <task1_handler+0x4>
 800020c:	08000ee8 	.word	0x08000ee8

08000210 <init_systick_timer>:
		printf("This is Task4\n");
	}
}


void init_systick_timer(uint32_t tick_hz) {
 8000210:	b480      	push	{r7}
 8000212:	b087      	sub	sp, #28
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]

	// accessing the systic registers
	uint32_t * pSYST_RVR = (uint32_t *)0xE000E014;
 8000218:	4b15      	ldr	r3, [pc, #84]	@ (8000270 <init_systick_timer+0x60>)
 800021a:	617b      	str	r3, [r7, #20]
	uint32_t * pSYST_CSR = (uint32_t *)0xE000E010;
 800021c:	4b15      	ldr	r3, [pc, #84]	@ (8000274 <init_systick_timer+0x64>)
 800021e:	613b      	str	r3, [r7, #16]

	uint32_t count_value = (SYSTICK_TIM_CLK / tick_hz) - 1;
 8000220:	4a15      	ldr	r2, [pc, #84]	@ (8000278 <init_systick_timer+0x68>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	fbb2 f3f3 	udiv	r3, r2, r3
 8000228:	3b01      	subs	r3, #1
 800022a:	60fb      	str	r3, [r7, #12]


	// clear the value of SVR
	*pSYST_RVR &= ~(0x00FFFFFFFF);
 800022c:	697b      	ldr	r3, [r7, #20]
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]

	// load the value into the SVR register
	*(pSYST_RVR) |= count_value;
 8000232:	697b      	ldr	r3, [r7, #20]
 8000234:	681a      	ldr	r2, [r3, #0]
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	431a      	orrs	r2, r3
 800023a:	697b      	ldr	r3, [r7, #20]
 800023c:	601a      	str	r2, [r3, #0]

	// Set the clock to the system timer from the processor clock
	*pSYST_CSR |= (1 << 2);
 800023e:	693b      	ldr	r3, [r7, #16]
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	f043 0204 	orr.w	r2, r3, #4
 8000246:	693b      	ldr	r3, [r7, #16]
 8000248:	601a      	str	r2, [r3, #0]
	// Enable exception setting TICKINT  so that exception handler is called
	*pSYST_CSR |= (1 << 1);
 800024a:	693b      	ldr	r3, [r7, #16]
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	f043 0202 	orr.w	r2, r3, #2
 8000252:	693b      	ldr	r3, [r7, #16]
 8000254:	601a      	str	r2, [r3, #0]
	// Enable the counter
	*pSYST_CSR |= (1 << 0);
 8000256:	693b      	ldr	r3, [r7, #16]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f043 0201 	orr.w	r2, r3, #1
 800025e:	693b      	ldr	r3, [r7, #16]
 8000260:	601a      	str	r2, [r3, #0]
}
 8000262:	bf00      	nop
 8000264:	371c      	adds	r7, #28
 8000266:	46bd      	mov	sp, r7
 8000268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	e000e014 	.word	0xe000e014
 8000274:	e000e010 	.word	0xe000e010
 8000278:	00186a00 	.word	0x00186a00

0800027c <init_scheduler_stack>:

__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack)
{
 800027c:	4603      	mov	r3, r0

	// accessing MSP through inline assembly
	__asm volatile("MSR MSP, %0": : "r" (sched_top_of_stack) : );
 800027e:	f383 8808 	msr	MSP, r3

	// go back to main
	__asm volatile("BX LR");
 8000282:	4770      	bx	lr
}
 8000284:	bf00      	nop
	...

08000288 <init_task_stack>:


void init_task_stack(void) {
 8000288:	b480      	push	{r7}
 800028a:	b085      	sub	sp, #20
 800028c:	af00      	add	r7, sp, #0

	// initialize 4 tasks
	uint32_t *psp;

	for (int i = 0; i < MAX_TASKS ; i++)
 800028e:	2300      	movs	r3, #0
 8000290:	60bb      	str	r3, [r7, #8]
 8000292:	e034      	b.n	80002fe <init_task_stack+0x76>
	{
		psp = (uint32_t *) psp_of_tasks[i];
 8000294:	4a1f      	ldr	r2, [pc, #124]	@ (8000314 <init_task_stack+0x8c>)
 8000296:	68bb      	ldr	r3, [r7, #8]
 8000298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800029c:	60fb      	str	r3, [r7, #12]

		// full descending stack so we decrement the pointer first
		(*psp)--;
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	1e5a      	subs	r2, r3, #1
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	601a      	str	r2, [r3, #0]

		// first value is xPsr
		*psp = DUMMY_XPSR;
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80002ae:	601a      	str	r2, [r3, #0]


		// for PC
		psp--;
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	3b04      	subs	r3, #4
 80002b4:	60fb      	str	r3, [r7, #12]
		*psp = (uint32_t *)task_handlers[i];
 80002b6:	4a18      	ldr	r2, [pc, #96]	@ (8000318 <init_task_stack+0x90>)
 80002b8:	68bb      	ldr	r3, [r7, #8]
 80002ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002be:	68fb      	ldr	r3, [r7, #12]
 80002c0:	601a      	str	r2, [r3, #0]


		// for LR
		psp--;
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	3b04      	subs	r3, #4
 80002c6:	60fb      	str	r3, [r7, #12]
		*psp = 0xFFFFFFFD;
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	f06f 0202 	mvn.w	r2, #2
 80002ce:	601a      	str	r2, [r3, #0]


		for (int j = 0; j < 13 ; j++) {
 80002d0:	2300      	movs	r3, #0
 80002d2:	607b      	str	r3, [r7, #4]
 80002d4:	e008      	b.n	80002e8 <init_task_stack+0x60>

			psp--;
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	3b04      	subs	r3, #4
 80002da:	60fb      	str	r3, [r7, #12]
			*psp = 0;
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 13 ; j++) {
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	3301      	adds	r3, #1
 80002e6:	607b      	str	r3, [r7, #4]
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	2b0c      	cmp	r3, #12
 80002ec:	ddf3      	ble.n	80002d6 <init_task_stack+0x4e>
		}


		psp_of_tasks[i] = (uint32_t)psp;
 80002ee:	68fa      	ldr	r2, [r7, #12]
 80002f0:	4908      	ldr	r1, [pc, #32]	@ (8000314 <init_task_stack+0x8c>)
 80002f2:	68bb      	ldr	r3, [r7, #8]
 80002f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < MAX_TASKS ; i++)
 80002f8:	68bb      	ldr	r3, [r7, #8]
 80002fa:	3301      	adds	r3, #1
 80002fc:	60bb      	str	r3, [r7, #8]
 80002fe:	68bb      	ldr	r3, [r7, #8]
 8000300:	2b03      	cmp	r3, #3
 8000302:	ddc7      	ble.n	8000294 <init_task_stack+0xc>


	}
}
 8000304:	bf00      	nop
 8000306:	bf00      	nop
 8000308:	3714      	adds	r7, #20
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	20000000 	.word	0x20000000
 8000318:	20000088 	.word	0x20000088

0800031c <get_psp_value>:

uint8_t current_task = 0;

uint32_t get_psp_value(void) {
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0

	return psp_of_tasks[current_task];
 8000320:	4b05      	ldr	r3, [pc, #20]	@ (8000338 <get_psp_value+0x1c>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	461a      	mov	r2, r3
 8000326:	4b05      	ldr	r3, [pc, #20]	@ (800033c <get_psp_value+0x20>)
 8000328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 800032c:	4618      	mov	r0, r3
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	20000098 	.word	0x20000098
 800033c:	20000000 	.word	0x20000000

08000340 <switch_sp_to_psp>:

__attribute__((naked)) void switch_sp_to_psp(void) {

	// save LR value to prevent corruption
	__asm volatile ("PUSH {LR}");
 8000340:	b500      	push	{lr}
	// initialize the psp with TASK 1 stack start address

	__asm volatile("BL get_psp_value");
 8000342:	f7ff ffeb 	bl	800031c <get_psp_value>

	// the intial stack address is now stored in RO
	__asm volatile ("MSR PSP, R0");
 8000346:	f380 8809 	msr	PSP, r0

	// restore LR value
	__asm volatile ("POP {LR}");
 800034a:	f85d eb04 	ldr.w	lr, [sp], #4

	// change SP to PSP using Control Register
	__asm volatile ("MOV R0, 0x02");
 800034e:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL, R0");
 8000352:	f380 8814 	msr	CONTROL, r0

	// return to main
	__asm volatile("BX LR");
 8000356:	4770      	bx	lr

}
 8000358:	bf00      	nop
	...

0800035c <save_psp_value>:

void save_psp_value(uint32_t current_psp_value)
{
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]

	psp_of_tasks[current_task] = current_psp_value;
 8000364:	4b06      	ldr	r3, [pc, #24]	@ (8000380 <save_psp_value+0x24>)
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	4619      	mov	r1, r3
 800036a:	4a06      	ldr	r2, [pc, #24]	@ (8000384 <save_psp_value+0x28>)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8000372:	bf00      	nop
 8000374:	370c      	adds	r7, #12
 8000376:	46bd      	mov	sp, r7
 8000378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	20000098 	.word	0x20000098
 8000384:	20000000 	.word	0x20000000

08000388 <update_next_task>:

void update_next_task(void){
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0

	// simulate the next task using round robin
	current_task++;
 800038c:	4b08      	ldr	r3, [pc, #32]	@ (80003b0 <update_next_task+0x28>)
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	3301      	adds	r3, #1
 8000392:	b2da      	uxtb	r2, r3
 8000394:	4b06      	ldr	r3, [pc, #24]	@ (80003b0 <update_next_task+0x28>)
 8000396:	701a      	strb	r2, [r3, #0]
	current_task %= MAX_TASKS;
 8000398:	4b05      	ldr	r3, [pc, #20]	@ (80003b0 <update_next_task+0x28>)
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	f003 0303 	and.w	r3, r3, #3
 80003a0:	b2da      	uxtb	r2, r3
 80003a2:	4b03      	ldr	r3, [pc, #12]	@ (80003b0 <update_next_task+0x28>)
 80003a4:	701a      	strb	r2, [r3, #0]
}
 80003a6:	bf00      	nop
 80003a8:	46bd      	mov	sp, r7
 80003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ae:	4770      	bx	lr
 80003b0:	20000098 	.word	0x20000098

080003b4 <SysTick_Handler>:

void SysTick_Handler(void) {
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0

	// save the context of the current task

	// get the current task PSP value
	__asm volatile ("MRS R0, PSP");
 80003b8:	f3ef 8009 	mrs	r0, PSP

	// using that PSP to store Stack frame 2 (R4 to R11)
	__asm volatile ("STMDB R0!, {R4-R11}");
 80003bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	// save the current value of PSP
	__asm volatile("BL save_psp_value");
 80003c0:	f7ff ffcc 	bl	800035c <save_psp_value>

	// Retrieve the context of the next task
	__asm volatile("BL update_next_task");
 80003c4:	f7ff ffe0 	bl	8000388 <update_next_task>

	// get its past PSP value
	__asm volatile("BL get_psp_value");
 80003c8:	f7ff ffa8 	bl	800031c <get_psp_value>

	// Retreive SF2
	__asm volatile("LDM R0!, {R4-R11}");
 80003cc:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	// update PSP and exit
	__asm volatile("MSR PSP, R0");
 80003d0:	f380 8809 	msr	PSP, r0

}
 80003d4:	bf00      	nop
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr

080003de <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003de:	b580      	push	{r7, lr}
 80003e0:	b086      	sub	sp, #24
 80003e2:	af00      	add	r7, sp, #0
 80003e4:	60f8      	str	r0, [r7, #12]
 80003e6:	60b9      	str	r1, [r7, #8]
 80003e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003ea:	2300      	movs	r3, #0
 80003ec:	617b      	str	r3, [r7, #20]
 80003ee:	e00a      	b.n	8000406 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80003f0:	f3af 8000 	nop.w
 80003f4:	4601      	mov	r1, r0
 80003f6:	68bb      	ldr	r3, [r7, #8]
 80003f8:	1c5a      	adds	r2, r3, #1
 80003fa:	60ba      	str	r2, [r7, #8]
 80003fc:	b2ca      	uxtb	r2, r1
 80003fe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000400:	697b      	ldr	r3, [r7, #20]
 8000402:	3301      	adds	r3, #1
 8000404:	617b      	str	r3, [r7, #20]
 8000406:	697a      	ldr	r2, [r7, #20]
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	429a      	cmp	r2, r3
 800040c:	dbf0      	blt.n	80003f0 <_read+0x12>
  }

  return len;
 800040e:	687b      	ldr	r3, [r7, #4]
}
 8000410:	4618      	mov	r0, r3
 8000412:	3718      	adds	r7, #24
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}

08000418 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b086      	sub	sp, #24
 800041c:	af00      	add	r7, sp, #0
 800041e:	60f8      	str	r0, [r7, #12]
 8000420:	60b9      	str	r1, [r7, #8]
 8000422:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000424:	2300      	movs	r3, #0
 8000426:	617b      	str	r3, [r7, #20]
 8000428:	e009      	b.n	800043e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800042a:	68bb      	ldr	r3, [r7, #8]
 800042c:	1c5a      	adds	r2, r3, #1
 800042e:	60ba      	str	r2, [r7, #8]
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	4618      	mov	r0, r3
 8000434:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000438:	697b      	ldr	r3, [r7, #20]
 800043a:	3301      	adds	r3, #1
 800043c:	617b      	str	r3, [r7, #20]
 800043e:	697a      	ldr	r2, [r7, #20]
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	429a      	cmp	r2, r3
 8000444:	dbf1      	blt.n	800042a <_write+0x12>
  }
  return len;
 8000446:	687b      	ldr	r3, [r7, #4]
}
 8000448:	4618      	mov	r0, r3
 800044a:	3718      	adds	r7, #24
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}

08000450 <_close>:

int _close(int file)
{
 8000450:	b480      	push	{r7}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000458:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800045c:	4618      	mov	r0, r3
 800045e:	370c      	adds	r7, #12
 8000460:	46bd      	mov	sp, r7
 8000462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000466:	4770      	bx	lr

08000468 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
 8000470:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000478:	605a      	str	r2, [r3, #4]
  return 0;
 800047a:	2300      	movs	r3, #0
}
 800047c:	4618      	mov	r0, r3
 800047e:	370c      	adds	r7, #12
 8000480:	46bd      	mov	sp, r7
 8000482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000486:	4770      	bx	lr

08000488 <_isatty>:

int _isatty(int file)
{
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000490:	2301      	movs	r3, #1
}
 8000492:	4618      	mov	r0, r3
 8000494:	370c      	adds	r7, #12
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr

0800049e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800049e:	b480      	push	{r7}
 80004a0:	b085      	sub	sp, #20
 80004a2:	af00      	add	r7, sp, #0
 80004a4:	60f8      	str	r0, [r7, #12]
 80004a6:	60b9      	str	r1, [r7, #8]
 80004a8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80004aa:	2300      	movs	r3, #0
}
 80004ac:	4618      	mov	r0, r3
 80004ae:	3714      	adds	r7, #20
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr

080004b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b086      	sub	sp, #24
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004c0:	4a14      	ldr	r2, [pc, #80]	@ (8000514 <_sbrk+0x5c>)
 80004c2:	4b15      	ldr	r3, [pc, #84]	@ (8000518 <_sbrk+0x60>)
 80004c4:	1ad3      	subs	r3, r2, r3
 80004c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004c8:	697b      	ldr	r3, [r7, #20]
 80004ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004cc:	4b13      	ldr	r3, [pc, #76]	@ (800051c <_sbrk+0x64>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d102      	bne.n	80004da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004d4:	4b11      	ldr	r3, [pc, #68]	@ (800051c <_sbrk+0x64>)
 80004d6:	4a12      	ldr	r2, [pc, #72]	@ (8000520 <_sbrk+0x68>)
 80004d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004da:	4b10      	ldr	r3, [pc, #64]	@ (800051c <_sbrk+0x64>)
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4413      	add	r3, r2
 80004e2:	693a      	ldr	r2, [r7, #16]
 80004e4:	429a      	cmp	r2, r3
 80004e6:	d207      	bcs.n	80004f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004e8:	f000 f96e 	bl	80007c8 <__errno>
 80004ec:	4603      	mov	r3, r0
 80004ee:	220c      	movs	r2, #12
 80004f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80004f6:	e009      	b.n	800050c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004f8:	4b08      	ldr	r3, [pc, #32]	@ (800051c <_sbrk+0x64>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004fe:	4b07      	ldr	r3, [pc, #28]	@ (800051c <_sbrk+0x64>)
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	4413      	add	r3, r2
 8000506:	4a05      	ldr	r2, [pc, #20]	@ (800051c <_sbrk+0x64>)
 8000508:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800050a:	68fb      	ldr	r3, [r7, #12]
}
 800050c:	4618      	mov	r0, r3
 800050e:	3718      	adds	r7, #24
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	20020000 	.word	0x20020000
 8000518:	00000400 	.word	0x00000400
 800051c:	2000009c 	.word	0x2000009c
 8000520:	200001f0 	.word	0x200001f0

08000524 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000524:	480d      	ldr	r0, [pc, #52]	@ (800055c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000526:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000528:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800052c:	480c      	ldr	r0, [pc, #48]	@ (8000560 <LoopForever+0x6>)
  ldr r1, =_edata
 800052e:	490d      	ldr	r1, [pc, #52]	@ (8000564 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000530:	4a0d      	ldr	r2, [pc, #52]	@ (8000568 <LoopForever+0xe>)
  movs r3, #0
 8000532:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000534:	e002      	b.n	800053c <LoopCopyDataInit>

08000536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800053a:	3304      	adds	r3, #4

0800053c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800053c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800053e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000540:	d3f9      	bcc.n	8000536 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000542:	4a0a      	ldr	r2, [pc, #40]	@ (800056c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000544:	4c0a      	ldr	r4, [pc, #40]	@ (8000570 <LoopForever+0x16>)
  movs r3, #0
 8000546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000548:	e001      	b.n	800054e <LoopFillZerobss>

0800054a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800054a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800054c:	3204      	adds	r2, #4

0800054e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800054e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000550:	d3fb      	bcc.n	800054a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000552:	f000 f93f 	bl	80007d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000556:	f7ff fe3f 	bl	80001d8 <main>

0800055a <LoopForever>:

LoopForever:
  b LoopForever
 800055a:	e7fe      	b.n	800055a <LoopForever>
  ldr   r0, =_estack
 800055c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000564:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000568:	08000f30 	.word	0x08000f30
  ldr r2, =_sbss
 800056c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000570:	200001ec 	.word	0x200001ec

08000574 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000574:	e7fe      	b.n	8000574 <ADC_IRQHandler>
	...

08000578 <std>:
 8000578:	2300      	movs	r3, #0
 800057a:	b510      	push	{r4, lr}
 800057c:	4604      	mov	r4, r0
 800057e:	e9c0 3300 	strd	r3, r3, [r0]
 8000582:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000586:	6083      	str	r3, [r0, #8]
 8000588:	8181      	strh	r1, [r0, #12]
 800058a:	6643      	str	r3, [r0, #100]	@ 0x64
 800058c:	81c2      	strh	r2, [r0, #14]
 800058e:	6183      	str	r3, [r0, #24]
 8000590:	4619      	mov	r1, r3
 8000592:	2208      	movs	r2, #8
 8000594:	305c      	adds	r0, #92	@ 0x5c
 8000596:	f000 f90f 	bl	80007b8 <memset>
 800059a:	4b0d      	ldr	r3, [pc, #52]	@ (80005d0 <std+0x58>)
 800059c:	6263      	str	r3, [r4, #36]	@ 0x24
 800059e:	4b0d      	ldr	r3, [pc, #52]	@ (80005d4 <std+0x5c>)
 80005a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80005a2:	4b0d      	ldr	r3, [pc, #52]	@ (80005d8 <std+0x60>)
 80005a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80005a6:	4b0d      	ldr	r3, [pc, #52]	@ (80005dc <std+0x64>)
 80005a8:	6323      	str	r3, [r4, #48]	@ 0x30
 80005aa:	4b0d      	ldr	r3, [pc, #52]	@ (80005e0 <std+0x68>)
 80005ac:	6224      	str	r4, [r4, #32]
 80005ae:	429c      	cmp	r4, r3
 80005b0:	d006      	beq.n	80005c0 <std+0x48>
 80005b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80005b6:	4294      	cmp	r4, r2
 80005b8:	d002      	beq.n	80005c0 <std+0x48>
 80005ba:	33d0      	adds	r3, #208	@ 0xd0
 80005bc:	429c      	cmp	r4, r3
 80005be:	d105      	bne.n	80005cc <std+0x54>
 80005c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80005c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005c8:	f000 b928 	b.w	800081c <__retarget_lock_init_recursive>
 80005cc:	bd10      	pop	{r4, pc}
 80005ce:	bf00      	nop
 80005d0:	08000ad9 	.word	0x08000ad9
 80005d4:	08000afb 	.word	0x08000afb
 80005d8:	08000b33 	.word	0x08000b33
 80005dc:	08000b57 	.word	0x08000b57
 80005e0:	200000a0 	.word	0x200000a0

080005e4 <stdio_exit_handler>:
 80005e4:	4a02      	ldr	r2, [pc, #8]	@ (80005f0 <stdio_exit_handler+0xc>)
 80005e6:	4903      	ldr	r1, [pc, #12]	@ (80005f4 <stdio_exit_handler+0x10>)
 80005e8:	4803      	ldr	r0, [pc, #12]	@ (80005f8 <stdio_exit_handler+0x14>)
 80005ea:	f000 b869 	b.w	80006c0 <_fwalk_sglue>
 80005ee:	bf00      	nop
 80005f0:	20000010 	.word	0x20000010
 80005f4:	08000a71 	.word	0x08000a71
 80005f8:	20000020 	.word	0x20000020

080005fc <cleanup_stdio>:
 80005fc:	6841      	ldr	r1, [r0, #4]
 80005fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000630 <cleanup_stdio+0x34>)
 8000600:	4299      	cmp	r1, r3
 8000602:	b510      	push	{r4, lr}
 8000604:	4604      	mov	r4, r0
 8000606:	d001      	beq.n	800060c <cleanup_stdio+0x10>
 8000608:	f000 fa32 	bl	8000a70 <_fflush_r>
 800060c:	68a1      	ldr	r1, [r4, #8]
 800060e:	4b09      	ldr	r3, [pc, #36]	@ (8000634 <cleanup_stdio+0x38>)
 8000610:	4299      	cmp	r1, r3
 8000612:	d002      	beq.n	800061a <cleanup_stdio+0x1e>
 8000614:	4620      	mov	r0, r4
 8000616:	f000 fa2b 	bl	8000a70 <_fflush_r>
 800061a:	68e1      	ldr	r1, [r4, #12]
 800061c:	4b06      	ldr	r3, [pc, #24]	@ (8000638 <cleanup_stdio+0x3c>)
 800061e:	4299      	cmp	r1, r3
 8000620:	d004      	beq.n	800062c <cleanup_stdio+0x30>
 8000622:	4620      	mov	r0, r4
 8000624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000628:	f000 ba22 	b.w	8000a70 <_fflush_r>
 800062c:	bd10      	pop	{r4, pc}
 800062e:	bf00      	nop
 8000630:	200000a0 	.word	0x200000a0
 8000634:	20000108 	.word	0x20000108
 8000638:	20000170 	.word	0x20000170

0800063c <global_stdio_init.part.0>:
 800063c:	b510      	push	{r4, lr}
 800063e:	4b0b      	ldr	r3, [pc, #44]	@ (800066c <global_stdio_init.part.0+0x30>)
 8000640:	4c0b      	ldr	r4, [pc, #44]	@ (8000670 <global_stdio_init.part.0+0x34>)
 8000642:	4a0c      	ldr	r2, [pc, #48]	@ (8000674 <global_stdio_init.part.0+0x38>)
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	4620      	mov	r0, r4
 8000648:	2200      	movs	r2, #0
 800064a:	2104      	movs	r1, #4
 800064c:	f7ff ff94 	bl	8000578 <std>
 8000650:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000654:	2201      	movs	r2, #1
 8000656:	2109      	movs	r1, #9
 8000658:	f7ff ff8e 	bl	8000578 <std>
 800065c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000660:	2202      	movs	r2, #2
 8000662:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000666:	2112      	movs	r1, #18
 8000668:	f7ff bf86 	b.w	8000578 <std>
 800066c:	200001d8 	.word	0x200001d8
 8000670:	200000a0 	.word	0x200000a0
 8000674:	080005e5 	.word	0x080005e5

08000678 <__sfp_lock_acquire>:
 8000678:	4801      	ldr	r0, [pc, #4]	@ (8000680 <__sfp_lock_acquire+0x8>)
 800067a:	f000 b8d0 	b.w	800081e <__retarget_lock_acquire_recursive>
 800067e:	bf00      	nop
 8000680:	200001dd 	.word	0x200001dd

08000684 <__sfp_lock_release>:
 8000684:	4801      	ldr	r0, [pc, #4]	@ (800068c <__sfp_lock_release+0x8>)
 8000686:	f000 b8cb 	b.w	8000820 <__retarget_lock_release_recursive>
 800068a:	bf00      	nop
 800068c:	200001dd 	.word	0x200001dd

08000690 <__sinit>:
 8000690:	b510      	push	{r4, lr}
 8000692:	4604      	mov	r4, r0
 8000694:	f7ff fff0 	bl	8000678 <__sfp_lock_acquire>
 8000698:	6a23      	ldr	r3, [r4, #32]
 800069a:	b11b      	cbz	r3, 80006a4 <__sinit+0x14>
 800069c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006a0:	f7ff bff0 	b.w	8000684 <__sfp_lock_release>
 80006a4:	4b04      	ldr	r3, [pc, #16]	@ (80006b8 <__sinit+0x28>)
 80006a6:	6223      	str	r3, [r4, #32]
 80006a8:	4b04      	ldr	r3, [pc, #16]	@ (80006bc <__sinit+0x2c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d1f5      	bne.n	800069c <__sinit+0xc>
 80006b0:	f7ff ffc4 	bl	800063c <global_stdio_init.part.0>
 80006b4:	e7f2      	b.n	800069c <__sinit+0xc>
 80006b6:	bf00      	nop
 80006b8:	080005fd 	.word	0x080005fd
 80006bc:	200001d8 	.word	0x200001d8

080006c0 <_fwalk_sglue>:
 80006c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80006c4:	4607      	mov	r7, r0
 80006c6:	4688      	mov	r8, r1
 80006c8:	4614      	mov	r4, r2
 80006ca:	2600      	movs	r6, #0
 80006cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80006d0:	f1b9 0901 	subs.w	r9, r9, #1
 80006d4:	d505      	bpl.n	80006e2 <_fwalk_sglue+0x22>
 80006d6:	6824      	ldr	r4, [r4, #0]
 80006d8:	2c00      	cmp	r4, #0
 80006da:	d1f7      	bne.n	80006cc <_fwalk_sglue+0xc>
 80006dc:	4630      	mov	r0, r6
 80006de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80006e2:	89ab      	ldrh	r3, [r5, #12]
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d907      	bls.n	80006f8 <_fwalk_sglue+0x38>
 80006e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80006ec:	3301      	adds	r3, #1
 80006ee:	d003      	beq.n	80006f8 <_fwalk_sglue+0x38>
 80006f0:	4629      	mov	r1, r5
 80006f2:	4638      	mov	r0, r7
 80006f4:	47c0      	blx	r8
 80006f6:	4306      	orrs	r6, r0
 80006f8:	3568      	adds	r5, #104	@ 0x68
 80006fa:	e7e9      	b.n	80006d0 <_fwalk_sglue+0x10>

080006fc <_puts_r>:
 80006fc:	6a03      	ldr	r3, [r0, #32]
 80006fe:	b570      	push	{r4, r5, r6, lr}
 8000700:	6884      	ldr	r4, [r0, #8]
 8000702:	4605      	mov	r5, r0
 8000704:	460e      	mov	r6, r1
 8000706:	b90b      	cbnz	r3, 800070c <_puts_r+0x10>
 8000708:	f7ff ffc2 	bl	8000690 <__sinit>
 800070c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800070e:	07db      	lsls	r3, r3, #31
 8000710:	d405      	bmi.n	800071e <_puts_r+0x22>
 8000712:	89a3      	ldrh	r3, [r4, #12]
 8000714:	0598      	lsls	r0, r3, #22
 8000716:	d402      	bmi.n	800071e <_puts_r+0x22>
 8000718:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800071a:	f000 f880 	bl	800081e <__retarget_lock_acquire_recursive>
 800071e:	89a3      	ldrh	r3, [r4, #12]
 8000720:	0719      	lsls	r1, r3, #28
 8000722:	d502      	bpl.n	800072a <_puts_r+0x2e>
 8000724:	6923      	ldr	r3, [r4, #16]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d135      	bne.n	8000796 <_puts_r+0x9a>
 800072a:	4621      	mov	r1, r4
 800072c:	4628      	mov	r0, r5
 800072e:	f000 fa55 	bl	8000bdc <__swsetup_r>
 8000732:	b380      	cbz	r0, 8000796 <_puts_r+0x9a>
 8000734:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8000738:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800073a:	07da      	lsls	r2, r3, #31
 800073c:	d405      	bmi.n	800074a <_puts_r+0x4e>
 800073e:	89a3      	ldrh	r3, [r4, #12]
 8000740:	059b      	lsls	r3, r3, #22
 8000742:	d402      	bmi.n	800074a <_puts_r+0x4e>
 8000744:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000746:	f000 f86b 	bl	8000820 <__retarget_lock_release_recursive>
 800074a:	4628      	mov	r0, r5
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	2b00      	cmp	r3, #0
 8000750:	da04      	bge.n	800075c <_puts_r+0x60>
 8000752:	69a2      	ldr	r2, [r4, #24]
 8000754:	429a      	cmp	r2, r3
 8000756:	dc17      	bgt.n	8000788 <_puts_r+0x8c>
 8000758:	290a      	cmp	r1, #10
 800075a:	d015      	beq.n	8000788 <_puts_r+0x8c>
 800075c:	6823      	ldr	r3, [r4, #0]
 800075e:	1c5a      	adds	r2, r3, #1
 8000760:	6022      	str	r2, [r4, #0]
 8000762:	7019      	strb	r1, [r3, #0]
 8000764:	68a3      	ldr	r3, [r4, #8]
 8000766:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800076a:	3b01      	subs	r3, #1
 800076c:	60a3      	str	r3, [r4, #8]
 800076e:	2900      	cmp	r1, #0
 8000770:	d1ed      	bne.n	800074e <_puts_r+0x52>
 8000772:	2b00      	cmp	r3, #0
 8000774:	da11      	bge.n	800079a <_puts_r+0x9e>
 8000776:	4622      	mov	r2, r4
 8000778:	210a      	movs	r1, #10
 800077a:	4628      	mov	r0, r5
 800077c:	f000 f9ef 	bl	8000b5e <__swbuf_r>
 8000780:	3001      	adds	r0, #1
 8000782:	d0d7      	beq.n	8000734 <_puts_r+0x38>
 8000784:	250a      	movs	r5, #10
 8000786:	e7d7      	b.n	8000738 <_puts_r+0x3c>
 8000788:	4622      	mov	r2, r4
 800078a:	4628      	mov	r0, r5
 800078c:	f000 f9e7 	bl	8000b5e <__swbuf_r>
 8000790:	3001      	adds	r0, #1
 8000792:	d1e7      	bne.n	8000764 <_puts_r+0x68>
 8000794:	e7ce      	b.n	8000734 <_puts_r+0x38>
 8000796:	3e01      	subs	r6, #1
 8000798:	e7e4      	b.n	8000764 <_puts_r+0x68>
 800079a:	6823      	ldr	r3, [r4, #0]
 800079c:	1c5a      	adds	r2, r3, #1
 800079e:	6022      	str	r2, [r4, #0]
 80007a0:	220a      	movs	r2, #10
 80007a2:	701a      	strb	r2, [r3, #0]
 80007a4:	e7ee      	b.n	8000784 <_puts_r+0x88>
	...

080007a8 <puts>:
 80007a8:	4b02      	ldr	r3, [pc, #8]	@ (80007b4 <puts+0xc>)
 80007aa:	4601      	mov	r1, r0
 80007ac:	6818      	ldr	r0, [r3, #0]
 80007ae:	f7ff bfa5 	b.w	80006fc <_puts_r>
 80007b2:	bf00      	nop
 80007b4:	2000001c 	.word	0x2000001c

080007b8 <memset>:
 80007b8:	4402      	add	r2, r0
 80007ba:	4603      	mov	r3, r0
 80007bc:	4293      	cmp	r3, r2
 80007be:	d100      	bne.n	80007c2 <memset+0xa>
 80007c0:	4770      	bx	lr
 80007c2:	f803 1b01 	strb.w	r1, [r3], #1
 80007c6:	e7f9      	b.n	80007bc <memset+0x4>

080007c8 <__errno>:
 80007c8:	4b01      	ldr	r3, [pc, #4]	@ (80007d0 <__errno+0x8>)
 80007ca:	6818      	ldr	r0, [r3, #0]
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	2000001c 	.word	0x2000001c

080007d4 <__libc_init_array>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	4d0d      	ldr	r5, [pc, #52]	@ (800080c <__libc_init_array+0x38>)
 80007d8:	4c0d      	ldr	r4, [pc, #52]	@ (8000810 <__libc_init_array+0x3c>)
 80007da:	1b64      	subs	r4, r4, r5
 80007dc:	10a4      	asrs	r4, r4, #2
 80007de:	2600      	movs	r6, #0
 80007e0:	42a6      	cmp	r6, r4
 80007e2:	d109      	bne.n	80007f8 <__libc_init_array+0x24>
 80007e4:	4d0b      	ldr	r5, [pc, #44]	@ (8000814 <__libc_init_array+0x40>)
 80007e6:	4c0c      	ldr	r4, [pc, #48]	@ (8000818 <__libc_init_array+0x44>)
 80007e8:	f000 fb72 	bl	8000ed0 <_init>
 80007ec:	1b64      	subs	r4, r4, r5
 80007ee:	10a4      	asrs	r4, r4, #2
 80007f0:	2600      	movs	r6, #0
 80007f2:	42a6      	cmp	r6, r4
 80007f4:	d105      	bne.n	8000802 <__libc_init_array+0x2e>
 80007f6:	bd70      	pop	{r4, r5, r6, pc}
 80007f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80007fc:	4798      	blx	r3
 80007fe:	3601      	adds	r6, #1
 8000800:	e7ee      	b.n	80007e0 <__libc_init_array+0xc>
 8000802:	f855 3b04 	ldr.w	r3, [r5], #4
 8000806:	4798      	blx	r3
 8000808:	3601      	adds	r6, #1
 800080a:	e7f2      	b.n	80007f2 <__libc_init_array+0x1e>
 800080c:	08000f28 	.word	0x08000f28
 8000810:	08000f28 	.word	0x08000f28
 8000814:	08000f28 	.word	0x08000f28
 8000818:	08000f2c 	.word	0x08000f2c

0800081c <__retarget_lock_init_recursive>:
 800081c:	4770      	bx	lr

0800081e <__retarget_lock_acquire_recursive>:
 800081e:	4770      	bx	lr

08000820 <__retarget_lock_release_recursive>:
 8000820:	4770      	bx	lr
	...

08000824 <sbrk_aligned>:
 8000824:	b570      	push	{r4, r5, r6, lr}
 8000826:	4e0f      	ldr	r6, [pc, #60]	@ (8000864 <sbrk_aligned+0x40>)
 8000828:	460c      	mov	r4, r1
 800082a:	6831      	ldr	r1, [r6, #0]
 800082c:	4605      	mov	r5, r0
 800082e:	b911      	cbnz	r1, 8000836 <sbrk_aligned+0x12>
 8000830:	f000 fae2 	bl	8000df8 <_sbrk_r>
 8000834:	6030      	str	r0, [r6, #0]
 8000836:	4621      	mov	r1, r4
 8000838:	4628      	mov	r0, r5
 800083a:	f000 fadd 	bl	8000df8 <_sbrk_r>
 800083e:	1c43      	adds	r3, r0, #1
 8000840:	d103      	bne.n	800084a <sbrk_aligned+0x26>
 8000842:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000846:	4620      	mov	r0, r4
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	1cc4      	adds	r4, r0, #3
 800084c:	f024 0403 	bic.w	r4, r4, #3
 8000850:	42a0      	cmp	r0, r4
 8000852:	d0f8      	beq.n	8000846 <sbrk_aligned+0x22>
 8000854:	1a21      	subs	r1, r4, r0
 8000856:	4628      	mov	r0, r5
 8000858:	f000 face 	bl	8000df8 <_sbrk_r>
 800085c:	3001      	adds	r0, #1
 800085e:	d1f2      	bne.n	8000846 <sbrk_aligned+0x22>
 8000860:	e7ef      	b.n	8000842 <sbrk_aligned+0x1e>
 8000862:	bf00      	nop
 8000864:	200001e0 	.word	0x200001e0

08000868 <_malloc_r>:
 8000868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800086c:	1ccd      	adds	r5, r1, #3
 800086e:	f025 0503 	bic.w	r5, r5, #3
 8000872:	3508      	adds	r5, #8
 8000874:	2d0c      	cmp	r5, #12
 8000876:	bf38      	it	cc
 8000878:	250c      	movcc	r5, #12
 800087a:	2d00      	cmp	r5, #0
 800087c:	4606      	mov	r6, r0
 800087e:	db01      	blt.n	8000884 <_malloc_r+0x1c>
 8000880:	42a9      	cmp	r1, r5
 8000882:	d904      	bls.n	800088e <_malloc_r+0x26>
 8000884:	230c      	movs	r3, #12
 8000886:	6033      	str	r3, [r6, #0]
 8000888:	2000      	movs	r0, #0
 800088a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800088e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000964 <_malloc_r+0xfc>
 8000892:	f000 f915 	bl	8000ac0 <__malloc_lock>
 8000896:	f8d8 3000 	ldr.w	r3, [r8]
 800089a:	461c      	mov	r4, r3
 800089c:	bb44      	cbnz	r4, 80008f0 <_malloc_r+0x88>
 800089e:	4629      	mov	r1, r5
 80008a0:	4630      	mov	r0, r6
 80008a2:	f7ff ffbf 	bl	8000824 <sbrk_aligned>
 80008a6:	1c43      	adds	r3, r0, #1
 80008a8:	4604      	mov	r4, r0
 80008aa:	d158      	bne.n	800095e <_malloc_r+0xf6>
 80008ac:	f8d8 4000 	ldr.w	r4, [r8]
 80008b0:	4627      	mov	r7, r4
 80008b2:	2f00      	cmp	r7, #0
 80008b4:	d143      	bne.n	800093e <_malloc_r+0xd6>
 80008b6:	2c00      	cmp	r4, #0
 80008b8:	d04b      	beq.n	8000952 <_malloc_r+0xea>
 80008ba:	6823      	ldr	r3, [r4, #0]
 80008bc:	4639      	mov	r1, r7
 80008be:	4630      	mov	r0, r6
 80008c0:	eb04 0903 	add.w	r9, r4, r3
 80008c4:	f000 fa98 	bl	8000df8 <_sbrk_r>
 80008c8:	4581      	cmp	r9, r0
 80008ca:	d142      	bne.n	8000952 <_malloc_r+0xea>
 80008cc:	6821      	ldr	r1, [r4, #0]
 80008ce:	1a6d      	subs	r5, r5, r1
 80008d0:	4629      	mov	r1, r5
 80008d2:	4630      	mov	r0, r6
 80008d4:	f7ff ffa6 	bl	8000824 <sbrk_aligned>
 80008d8:	3001      	adds	r0, #1
 80008da:	d03a      	beq.n	8000952 <_malloc_r+0xea>
 80008dc:	6823      	ldr	r3, [r4, #0]
 80008de:	442b      	add	r3, r5
 80008e0:	6023      	str	r3, [r4, #0]
 80008e2:	f8d8 3000 	ldr.w	r3, [r8]
 80008e6:	685a      	ldr	r2, [r3, #4]
 80008e8:	bb62      	cbnz	r2, 8000944 <_malloc_r+0xdc>
 80008ea:	f8c8 7000 	str.w	r7, [r8]
 80008ee:	e00f      	b.n	8000910 <_malloc_r+0xa8>
 80008f0:	6822      	ldr	r2, [r4, #0]
 80008f2:	1b52      	subs	r2, r2, r5
 80008f4:	d420      	bmi.n	8000938 <_malloc_r+0xd0>
 80008f6:	2a0b      	cmp	r2, #11
 80008f8:	d917      	bls.n	800092a <_malloc_r+0xc2>
 80008fa:	1961      	adds	r1, r4, r5
 80008fc:	42a3      	cmp	r3, r4
 80008fe:	6025      	str	r5, [r4, #0]
 8000900:	bf18      	it	ne
 8000902:	6059      	strne	r1, [r3, #4]
 8000904:	6863      	ldr	r3, [r4, #4]
 8000906:	bf08      	it	eq
 8000908:	f8c8 1000 	streq.w	r1, [r8]
 800090c:	5162      	str	r2, [r4, r5]
 800090e:	604b      	str	r3, [r1, #4]
 8000910:	4630      	mov	r0, r6
 8000912:	f000 f8db 	bl	8000acc <__malloc_unlock>
 8000916:	f104 000b 	add.w	r0, r4, #11
 800091a:	1d23      	adds	r3, r4, #4
 800091c:	f020 0007 	bic.w	r0, r0, #7
 8000920:	1ac2      	subs	r2, r0, r3
 8000922:	bf1c      	itt	ne
 8000924:	1a1b      	subne	r3, r3, r0
 8000926:	50a3      	strne	r3, [r4, r2]
 8000928:	e7af      	b.n	800088a <_malloc_r+0x22>
 800092a:	6862      	ldr	r2, [r4, #4]
 800092c:	42a3      	cmp	r3, r4
 800092e:	bf0c      	ite	eq
 8000930:	f8c8 2000 	streq.w	r2, [r8]
 8000934:	605a      	strne	r2, [r3, #4]
 8000936:	e7eb      	b.n	8000910 <_malloc_r+0xa8>
 8000938:	4623      	mov	r3, r4
 800093a:	6864      	ldr	r4, [r4, #4]
 800093c:	e7ae      	b.n	800089c <_malloc_r+0x34>
 800093e:	463c      	mov	r4, r7
 8000940:	687f      	ldr	r7, [r7, #4]
 8000942:	e7b6      	b.n	80008b2 <_malloc_r+0x4a>
 8000944:	461a      	mov	r2, r3
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	42a3      	cmp	r3, r4
 800094a:	d1fb      	bne.n	8000944 <_malloc_r+0xdc>
 800094c:	2300      	movs	r3, #0
 800094e:	6053      	str	r3, [r2, #4]
 8000950:	e7de      	b.n	8000910 <_malloc_r+0xa8>
 8000952:	230c      	movs	r3, #12
 8000954:	6033      	str	r3, [r6, #0]
 8000956:	4630      	mov	r0, r6
 8000958:	f000 f8b8 	bl	8000acc <__malloc_unlock>
 800095c:	e794      	b.n	8000888 <_malloc_r+0x20>
 800095e:	6005      	str	r5, [r0, #0]
 8000960:	e7d6      	b.n	8000910 <_malloc_r+0xa8>
 8000962:	bf00      	nop
 8000964:	200001e4 	.word	0x200001e4

08000968 <__sflush_r>:
 8000968:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800096c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000970:	0716      	lsls	r6, r2, #28
 8000972:	4605      	mov	r5, r0
 8000974:	460c      	mov	r4, r1
 8000976:	d454      	bmi.n	8000a22 <__sflush_r+0xba>
 8000978:	684b      	ldr	r3, [r1, #4]
 800097a:	2b00      	cmp	r3, #0
 800097c:	dc02      	bgt.n	8000984 <__sflush_r+0x1c>
 800097e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000980:	2b00      	cmp	r3, #0
 8000982:	dd48      	ble.n	8000a16 <__sflush_r+0xae>
 8000984:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000986:	2e00      	cmp	r6, #0
 8000988:	d045      	beq.n	8000a16 <__sflush_r+0xae>
 800098a:	2300      	movs	r3, #0
 800098c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000990:	682f      	ldr	r7, [r5, #0]
 8000992:	6a21      	ldr	r1, [r4, #32]
 8000994:	602b      	str	r3, [r5, #0]
 8000996:	d030      	beq.n	80009fa <__sflush_r+0x92>
 8000998:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800099a:	89a3      	ldrh	r3, [r4, #12]
 800099c:	0759      	lsls	r1, r3, #29
 800099e:	d505      	bpl.n	80009ac <__sflush_r+0x44>
 80009a0:	6863      	ldr	r3, [r4, #4]
 80009a2:	1ad2      	subs	r2, r2, r3
 80009a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80009a6:	b10b      	cbz	r3, 80009ac <__sflush_r+0x44>
 80009a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80009aa:	1ad2      	subs	r2, r2, r3
 80009ac:	2300      	movs	r3, #0
 80009ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80009b0:	6a21      	ldr	r1, [r4, #32]
 80009b2:	4628      	mov	r0, r5
 80009b4:	47b0      	blx	r6
 80009b6:	1c43      	adds	r3, r0, #1
 80009b8:	89a3      	ldrh	r3, [r4, #12]
 80009ba:	d106      	bne.n	80009ca <__sflush_r+0x62>
 80009bc:	6829      	ldr	r1, [r5, #0]
 80009be:	291d      	cmp	r1, #29
 80009c0:	d82b      	bhi.n	8000a1a <__sflush_r+0xb2>
 80009c2:	4a2a      	ldr	r2, [pc, #168]	@ (8000a6c <__sflush_r+0x104>)
 80009c4:	410a      	asrs	r2, r1
 80009c6:	07d6      	lsls	r6, r2, #31
 80009c8:	d427      	bmi.n	8000a1a <__sflush_r+0xb2>
 80009ca:	2200      	movs	r2, #0
 80009cc:	6062      	str	r2, [r4, #4]
 80009ce:	04d9      	lsls	r1, r3, #19
 80009d0:	6922      	ldr	r2, [r4, #16]
 80009d2:	6022      	str	r2, [r4, #0]
 80009d4:	d504      	bpl.n	80009e0 <__sflush_r+0x78>
 80009d6:	1c42      	adds	r2, r0, #1
 80009d8:	d101      	bne.n	80009de <__sflush_r+0x76>
 80009da:	682b      	ldr	r3, [r5, #0]
 80009dc:	b903      	cbnz	r3, 80009e0 <__sflush_r+0x78>
 80009de:	6560      	str	r0, [r4, #84]	@ 0x54
 80009e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80009e2:	602f      	str	r7, [r5, #0]
 80009e4:	b1b9      	cbz	r1, 8000a16 <__sflush_r+0xae>
 80009e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80009ea:	4299      	cmp	r1, r3
 80009ec:	d002      	beq.n	80009f4 <__sflush_r+0x8c>
 80009ee:	4628      	mov	r0, r5
 80009f0:	f000 fa24 	bl	8000e3c <_free_r>
 80009f4:	2300      	movs	r3, #0
 80009f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80009f8:	e00d      	b.n	8000a16 <__sflush_r+0xae>
 80009fa:	2301      	movs	r3, #1
 80009fc:	4628      	mov	r0, r5
 80009fe:	47b0      	blx	r6
 8000a00:	4602      	mov	r2, r0
 8000a02:	1c50      	adds	r0, r2, #1
 8000a04:	d1c9      	bne.n	800099a <__sflush_r+0x32>
 8000a06:	682b      	ldr	r3, [r5, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d0c6      	beq.n	800099a <__sflush_r+0x32>
 8000a0c:	2b1d      	cmp	r3, #29
 8000a0e:	d001      	beq.n	8000a14 <__sflush_r+0xac>
 8000a10:	2b16      	cmp	r3, #22
 8000a12:	d11e      	bne.n	8000a52 <__sflush_r+0xea>
 8000a14:	602f      	str	r7, [r5, #0]
 8000a16:	2000      	movs	r0, #0
 8000a18:	e022      	b.n	8000a60 <__sflush_r+0xf8>
 8000a1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a1e:	b21b      	sxth	r3, r3
 8000a20:	e01b      	b.n	8000a5a <__sflush_r+0xf2>
 8000a22:	690f      	ldr	r7, [r1, #16]
 8000a24:	2f00      	cmp	r7, #0
 8000a26:	d0f6      	beq.n	8000a16 <__sflush_r+0xae>
 8000a28:	0793      	lsls	r3, r2, #30
 8000a2a:	680e      	ldr	r6, [r1, #0]
 8000a2c:	bf08      	it	eq
 8000a2e:	694b      	ldreq	r3, [r1, #20]
 8000a30:	600f      	str	r7, [r1, #0]
 8000a32:	bf18      	it	ne
 8000a34:	2300      	movne	r3, #0
 8000a36:	eba6 0807 	sub.w	r8, r6, r7
 8000a3a:	608b      	str	r3, [r1, #8]
 8000a3c:	f1b8 0f00 	cmp.w	r8, #0
 8000a40:	dde9      	ble.n	8000a16 <__sflush_r+0xae>
 8000a42:	6a21      	ldr	r1, [r4, #32]
 8000a44:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8000a46:	4643      	mov	r3, r8
 8000a48:	463a      	mov	r2, r7
 8000a4a:	4628      	mov	r0, r5
 8000a4c:	47b0      	blx	r6
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	dc08      	bgt.n	8000a64 <__sflush_r+0xfc>
 8000a52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a5a:	81a3      	strh	r3, [r4, #12]
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a64:	4407      	add	r7, r0
 8000a66:	eba8 0800 	sub.w	r8, r8, r0
 8000a6a:	e7e7      	b.n	8000a3c <__sflush_r+0xd4>
 8000a6c:	dfbffffe 	.word	0xdfbffffe

08000a70 <_fflush_r>:
 8000a70:	b538      	push	{r3, r4, r5, lr}
 8000a72:	690b      	ldr	r3, [r1, #16]
 8000a74:	4605      	mov	r5, r0
 8000a76:	460c      	mov	r4, r1
 8000a78:	b913      	cbnz	r3, 8000a80 <_fflush_r+0x10>
 8000a7a:	2500      	movs	r5, #0
 8000a7c:	4628      	mov	r0, r5
 8000a7e:	bd38      	pop	{r3, r4, r5, pc}
 8000a80:	b118      	cbz	r0, 8000a8a <_fflush_r+0x1a>
 8000a82:	6a03      	ldr	r3, [r0, #32]
 8000a84:	b90b      	cbnz	r3, 8000a8a <_fflush_r+0x1a>
 8000a86:	f7ff fe03 	bl	8000690 <__sinit>
 8000a8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d0f3      	beq.n	8000a7a <_fflush_r+0xa>
 8000a92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000a94:	07d0      	lsls	r0, r2, #31
 8000a96:	d404      	bmi.n	8000aa2 <_fflush_r+0x32>
 8000a98:	0599      	lsls	r1, r3, #22
 8000a9a:	d402      	bmi.n	8000aa2 <_fflush_r+0x32>
 8000a9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000a9e:	f7ff febe 	bl	800081e <__retarget_lock_acquire_recursive>
 8000aa2:	4628      	mov	r0, r5
 8000aa4:	4621      	mov	r1, r4
 8000aa6:	f7ff ff5f 	bl	8000968 <__sflush_r>
 8000aaa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000aac:	07da      	lsls	r2, r3, #31
 8000aae:	4605      	mov	r5, r0
 8000ab0:	d4e4      	bmi.n	8000a7c <_fflush_r+0xc>
 8000ab2:	89a3      	ldrh	r3, [r4, #12]
 8000ab4:	059b      	lsls	r3, r3, #22
 8000ab6:	d4e1      	bmi.n	8000a7c <_fflush_r+0xc>
 8000ab8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000aba:	f7ff feb1 	bl	8000820 <__retarget_lock_release_recursive>
 8000abe:	e7dd      	b.n	8000a7c <_fflush_r+0xc>

08000ac0 <__malloc_lock>:
 8000ac0:	4801      	ldr	r0, [pc, #4]	@ (8000ac8 <__malloc_lock+0x8>)
 8000ac2:	f7ff beac 	b.w	800081e <__retarget_lock_acquire_recursive>
 8000ac6:	bf00      	nop
 8000ac8:	200001dc 	.word	0x200001dc

08000acc <__malloc_unlock>:
 8000acc:	4801      	ldr	r0, [pc, #4]	@ (8000ad4 <__malloc_unlock+0x8>)
 8000ace:	f7ff bea7 	b.w	8000820 <__retarget_lock_release_recursive>
 8000ad2:	bf00      	nop
 8000ad4:	200001dc 	.word	0x200001dc

08000ad8 <__sread>:
 8000ad8:	b510      	push	{r4, lr}
 8000ada:	460c      	mov	r4, r1
 8000adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ae0:	f000 f978 	bl	8000dd4 <_read_r>
 8000ae4:	2800      	cmp	r0, #0
 8000ae6:	bfab      	itete	ge
 8000ae8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000aea:	89a3      	ldrhlt	r3, [r4, #12]
 8000aec:	181b      	addge	r3, r3, r0
 8000aee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000af2:	bfac      	ite	ge
 8000af4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000af6:	81a3      	strhlt	r3, [r4, #12]
 8000af8:	bd10      	pop	{r4, pc}

08000afa <__swrite>:
 8000afa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000afe:	461f      	mov	r7, r3
 8000b00:	898b      	ldrh	r3, [r1, #12]
 8000b02:	05db      	lsls	r3, r3, #23
 8000b04:	4605      	mov	r5, r0
 8000b06:	460c      	mov	r4, r1
 8000b08:	4616      	mov	r6, r2
 8000b0a:	d505      	bpl.n	8000b18 <__swrite+0x1e>
 8000b0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b10:	2302      	movs	r3, #2
 8000b12:	2200      	movs	r2, #0
 8000b14:	f000 f94c 	bl	8000db0 <_lseek_r>
 8000b18:	89a3      	ldrh	r3, [r4, #12]
 8000b1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000b1e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000b22:	81a3      	strh	r3, [r4, #12]
 8000b24:	4632      	mov	r2, r6
 8000b26:	463b      	mov	r3, r7
 8000b28:	4628      	mov	r0, r5
 8000b2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000b2e:	f000 b973 	b.w	8000e18 <_write_r>

08000b32 <__sseek>:
 8000b32:	b510      	push	{r4, lr}
 8000b34:	460c      	mov	r4, r1
 8000b36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b3a:	f000 f939 	bl	8000db0 <_lseek_r>
 8000b3e:	1c43      	adds	r3, r0, #1
 8000b40:	89a3      	ldrh	r3, [r4, #12]
 8000b42:	bf15      	itete	ne
 8000b44:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000b46:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000b4a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000b4e:	81a3      	strheq	r3, [r4, #12]
 8000b50:	bf18      	it	ne
 8000b52:	81a3      	strhne	r3, [r4, #12]
 8000b54:	bd10      	pop	{r4, pc}

08000b56 <__sclose>:
 8000b56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b5a:	f000 b8f7 	b.w	8000d4c <_close_r>

08000b5e <__swbuf_r>:
 8000b5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b60:	460e      	mov	r6, r1
 8000b62:	4614      	mov	r4, r2
 8000b64:	4605      	mov	r5, r0
 8000b66:	b118      	cbz	r0, 8000b70 <__swbuf_r+0x12>
 8000b68:	6a03      	ldr	r3, [r0, #32]
 8000b6a:	b90b      	cbnz	r3, 8000b70 <__swbuf_r+0x12>
 8000b6c:	f7ff fd90 	bl	8000690 <__sinit>
 8000b70:	69a3      	ldr	r3, [r4, #24]
 8000b72:	60a3      	str	r3, [r4, #8]
 8000b74:	89a3      	ldrh	r3, [r4, #12]
 8000b76:	071a      	lsls	r2, r3, #28
 8000b78:	d501      	bpl.n	8000b7e <__swbuf_r+0x20>
 8000b7a:	6923      	ldr	r3, [r4, #16]
 8000b7c:	b943      	cbnz	r3, 8000b90 <__swbuf_r+0x32>
 8000b7e:	4621      	mov	r1, r4
 8000b80:	4628      	mov	r0, r5
 8000b82:	f000 f82b 	bl	8000bdc <__swsetup_r>
 8000b86:	b118      	cbz	r0, 8000b90 <__swbuf_r+0x32>
 8000b88:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8000b8c:	4638      	mov	r0, r7
 8000b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b90:	6823      	ldr	r3, [r4, #0]
 8000b92:	6922      	ldr	r2, [r4, #16]
 8000b94:	1a98      	subs	r0, r3, r2
 8000b96:	6963      	ldr	r3, [r4, #20]
 8000b98:	b2f6      	uxtb	r6, r6
 8000b9a:	4283      	cmp	r3, r0
 8000b9c:	4637      	mov	r7, r6
 8000b9e:	dc05      	bgt.n	8000bac <__swbuf_r+0x4e>
 8000ba0:	4621      	mov	r1, r4
 8000ba2:	4628      	mov	r0, r5
 8000ba4:	f7ff ff64 	bl	8000a70 <_fflush_r>
 8000ba8:	2800      	cmp	r0, #0
 8000baa:	d1ed      	bne.n	8000b88 <__swbuf_r+0x2a>
 8000bac:	68a3      	ldr	r3, [r4, #8]
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	60a3      	str	r3, [r4, #8]
 8000bb2:	6823      	ldr	r3, [r4, #0]
 8000bb4:	1c5a      	adds	r2, r3, #1
 8000bb6:	6022      	str	r2, [r4, #0]
 8000bb8:	701e      	strb	r6, [r3, #0]
 8000bba:	6962      	ldr	r2, [r4, #20]
 8000bbc:	1c43      	adds	r3, r0, #1
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d004      	beq.n	8000bcc <__swbuf_r+0x6e>
 8000bc2:	89a3      	ldrh	r3, [r4, #12]
 8000bc4:	07db      	lsls	r3, r3, #31
 8000bc6:	d5e1      	bpl.n	8000b8c <__swbuf_r+0x2e>
 8000bc8:	2e0a      	cmp	r6, #10
 8000bca:	d1df      	bne.n	8000b8c <__swbuf_r+0x2e>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	4628      	mov	r0, r5
 8000bd0:	f7ff ff4e 	bl	8000a70 <_fflush_r>
 8000bd4:	2800      	cmp	r0, #0
 8000bd6:	d0d9      	beq.n	8000b8c <__swbuf_r+0x2e>
 8000bd8:	e7d6      	b.n	8000b88 <__swbuf_r+0x2a>
	...

08000bdc <__swsetup_r>:
 8000bdc:	b538      	push	{r3, r4, r5, lr}
 8000bde:	4b29      	ldr	r3, [pc, #164]	@ (8000c84 <__swsetup_r+0xa8>)
 8000be0:	4605      	mov	r5, r0
 8000be2:	6818      	ldr	r0, [r3, #0]
 8000be4:	460c      	mov	r4, r1
 8000be6:	b118      	cbz	r0, 8000bf0 <__swsetup_r+0x14>
 8000be8:	6a03      	ldr	r3, [r0, #32]
 8000bea:	b90b      	cbnz	r3, 8000bf0 <__swsetup_r+0x14>
 8000bec:	f7ff fd50 	bl	8000690 <__sinit>
 8000bf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000bf4:	0719      	lsls	r1, r3, #28
 8000bf6:	d422      	bmi.n	8000c3e <__swsetup_r+0x62>
 8000bf8:	06da      	lsls	r2, r3, #27
 8000bfa:	d407      	bmi.n	8000c0c <__swsetup_r+0x30>
 8000bfc:	2209      	movs	r2, #9
 8000bfe:	602a      	str	r2, [r5, #0]
 8000c00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c04:	81a3      	strh	r3, [r4, #12]
 8000c06:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c0a:	e033      	b.n	8000c74 <__swsetup_r+0x98>
 8000c0c:	0758      	lsls	r0, r3, #29
 8000c0e:	d512      	bpl.n	8000c36 <__swsetup_r+0x5a>
 8000c10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000c12:	b141      	cbz	r1, 8000c26 <__swsetup_r+0x4a>
 8000c14:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000c18:	4299      	cmp	r1, r3
 8000c1a:	d002      	beq.n	8000c22 <__swsetup_r+0x46>
 8000c1c:	4628      	mov	r0, r5
 8000c1e:	f000 f90d 	bl	8000e3c <_free_r>
 8000c22:	2300      	movs	r3, #0
 8000c24:	6363      	str	r3, [r4, #52]	@ 0x34
 8000c26:	89a3      	ldrh	r3, [r4, #12]
 8000c28:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000c2c:	81a3      	strh	r3, [r4, #12]
 8000c2e:	2300      	movs	r3, #0
 8000c30:	6063      	str	r3, [r4, #4]
 8000c32:	6923      	ldr	r3, [r4, #16]
 8000c34:	6023      	str	r3, [r4, #0]
 8000c36:	89a3      	ldrh	r3, [r4, #12]
 8000c38:	f043 0308 	orr.w	r3, r3, #8
 8000c3c:	81a3      	strh	r3, [r4, #12]
 8000c3e:	6923      	ldr	r3, [r4, #16]
 8000c40:	b94b      	cbnz	r3, 8000c56 <__swsetup_r+0x7a>
 8000c42:	89a3      	ldrh	r3, [r4, #12]
 8000c44:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000c48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c4c:	d003      	beq.n	8000c56 <__swsetup_r+0x7a>
 8000c4e:	4621      	mov	r1, r4
 8000c50:	4628      	mov	r0, r5
 8000c52:	f000 f83f 	bl	8000cd4 <__smakebuf_r>
 8000c56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c5a:	f013 0201 	ands.w	r2, r3, #1
 8000c5e:	d00a      	beq.n	8000c76 <__swsetup_r+0x9a>
 8000c60:	2200      	movs	r2, #0
 8000c62:	60a2      	str	r2, [r4, #8]
 8000c64:	6962      	ldr	r2, [r4, #20]
 8000c66:	4252      	negs	r2, r2
 8000c68:	61a2      	str	r2, [r4, #24]
 8000c6a:	6922      	ldr	r2, [r4, #16]
 8000c6c:	b942      	cbnz	r2, 8000c80 <__swsetup_r+0xa4>
 8000c6e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000c72:	d1c5      	bne.n	8000c00 <__swsetup_r+0x24>
 8000c74:	bd38      	pop	{r3, r4, r5, pc}
 8000c76:	0799      	lsls	r1, r3, #30
 8000c78:	bf58      	it	pl
 8000c7a:	6962      	ldrpl	r2, [r4, #20]
 8000c7c:	60a2      	str	r2, [r4, #8]
 8000c7e:	e7f4      	b.n	8000c6a <__swsetup_r+0x8e>
 8000c80:	2000      	movs	r0, #0
 8000c82:	e7f7      	b.n	8000c74 <__swsetup_r+0x98>
 8000c84:	2000001c 	.word	0x2000001c

08000c88 <__swhatbuf_r>:
 8000c88:	b570      	push	{r4, r5, r6, lr}
 8000c8a:	460c      	mov	r4, r1
 8000c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c90:	2900      	cmp	r1, #0
 8000c92:	b096      	sub	sp, #88	@ 0x58
 8000c94:	4615      	mov	r5, r2
 8000c96:	461e      	mov	r6, r3
 8000c98:	da0d      	bge.n	8000cb6 <__swhatbuf_r+0x2e>
 8000c9a:	89a3      	ldrh	r3, [r4, #12]
 8000c9c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000ca0:	f04f 0100 	mov.w	r1, #0
 8000ca4:	bf14      	ite	ne
 8000ca6:	2340      	movne	r3, #64	@ 0x40
 8000ca8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000cac:	2000      	movs	r0, #0
 8000cae:	6031      	str	r1, [r6, #0]
 8000cb0:	602b      	str	r3, [r5, #0]
 8000cb2:	b016      	add	sp, #88	@ 0x58
 8000cb4:	bd70      	pop	{r4, r5, r6, pc}
 8000cb6:	466a      	mov	r2, sp
 8000cb8:	f000 f858 	bl	8000d6c <_fstat_r>
 8000cbc:	2800      	cmp	r0, #0
 8000cbe:	dbec      	blt.n	8000c9a <__swhatbuf_r+0x12>
 8000cc0:	9901      	ldr	r1, [sp, #4]
 8000cc2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000cc6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000cca:	4259      	negs	r1, r3
 8000ccc:	4159      	adcs	r1, r3
 8000cce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cd2:	e7eb      	b.n	8000cac <__swhatbuf_r+0x24>

08000cd4 <__smakebuf_r>:
 8000cd4:	898b      	ldrh	r3, [r1, #12]
 8000cd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000cd8:	079d      	lsls	r5, r3, #30
 8000cda:	4606      	mov	r6, r0
 8000cdc:	460c      	mov	r4, r1
 8000cde:	d507      	bpl.n	8000cf0 <__smakebuf_r+0x1c>
 8000ce0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000ce4:	6023      	str	r3, [r4, #0]
 8000ce6:	6123      	str	r3, [r4, #16]
 8000ce8:	2301      	movs	r3, #1
 8000cea:	6163      	str	r3, [r4, #20]
 8000cec:	b003      	add	sp, #12
 8000cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cf0:	ab01      	add	r3, sp, #4
 8000cf2:	466a      	mov	r2, sp
 8000cf4:	f7ff ffc8 	bl	8000c88 <__swhatbuf_r>
 8000cf8:	9f00      	ldr	r7, [sp, #0]
 8000cfa:	4605      	mov	r5, r0
 8000cfc:	4639      	mov	r1, r7
 8000cfe:	4630      	mov	r0, r6
 8000d00:	f7ff fdb2 	bl	8000868 <_malloc_r>
 8000d04:	b948      	cbnz	r0, 8000d1a <__smakebuf_r+0x46>
 8000d06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d0a:	059a      	lsls	r2, r3, #22
 8000d0c:	d4ee      	bmi.n	8000cec <__smakebuf_r+0x18>
 8000d0e:	f023 0303 	bic.w	r3, r3, #3
 8000d12:	f043 0302 	orr.w	r3, r3, #2
 8000d16:	81a3      	strh	r3, [r4, #12]
 8000d18:	e7e2      	b.n	8000ce0 <__smakebuf_r+0xc>
 8000d1a:	89a3      	ldrh	r3, [r4, #12]
 8000d1c:	6020      	str	r0, [r4, #0]
 8000d1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d22:	81a3      	strh	r3, [r4, #12]
 8000d24:	9b01      	ldr	r3, [sp, #4]
 8000d26:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000d2a:	b15b      	cbz	r3, 8000d44 <__smakebuf_r+0x70>
 8000d2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d30:	4630      	mov	r0, r6
 8000d32:	f000 f82d 	bl	8000d90 <_isatty_r>
 8000d36:	b128      	cbz	r0, 8000d44 <__smakebuf_r+0x70>
 8000d38:	89a3      	ldrh	r3, [r4, #12]
 8000d3a:	f023 0303 	bic.w	r3, r3, #3
 8000d3e:	f043 0301 	orr.w	r3, r3, #1
 8000d42:	81a3      	strh	r3, [r4, #12]
 8000d44:	89a3      	ldrh	r3, [r4, #12]
 8000d46:	431d      	orrs	r5, r3
 8000d48:	81a5      	strh	r5, [r4, #12]
 8000d4a:	e7cf      	b.n	8000cec <__smakebuf_r+0x18>

08000d4c <_close_r>:
 8000d4c:	b538      	push	{r3, r4, r5, lr}
 8000d4e:	4d06      	ldr	r5, [pc, #24]	@ (8000d68 <_close_r+0x1c>)
 8000d50:	2300      	movs	r3, #0
 8000d52:	4604      	mov	r4, r0
 8000d54:	4608      	mov	r0, r1
 8000d56:	602b      	str	r3, [r5, #0]
 8000d58:	f7ff fb7a 	bl	8000450 <_close>
 8000d5c:	1c43      	adds	r3, r0, #1
 8000d5e:	d102      	bne.n	8000d66 <_close_r+0x1a>
 8000d60:	682b      	ldr	r3, [r5, #0]
 8000d62:	b103      	cbz	r3, 8000d66 <_close_r+0x1a>
 8000d64:	6023      	str	r3, [r4, #0]
 8000d66:	bd38      	pop	{r3, r4, r5, pc}
 8000d68:	200001e8 	.word	0x200001e8

08000d6c <_fstat_r>:
 8000d6c:	b538      	push	{r3, r4, r5, lr}
 8000d6e:	4d07      	ldr	r5, [pc, #28]	@ (8000d8c <_fstat_r+0x20>)
 8000d70:	2300      	movs	r3, #0
 8000d72:	4604      	mov	r4, r0
 8000d74:	4608      	mov	r0, r1
 8000d76:	4611      	mov	r1, r2
 8000d78:	602b      	str	r3, [r5, #0]
 8000d7a:	f7ff fb75 	bl	8000468 <_fstat>
 8000d7e:	1c43      	adds	r3, r0, #1
 8000d80:	d102      	bne.n	8000d88 <_fstat_r+0x1c>
 8000d82:	682b      	ldr	r3, [r5, #0]
 8000d84:	b103      	cbz	r3, 8000d88 <_fstat_r+0x1c>
 8000d86:	6023      	str	r3, [r4, #0]
 8000d88:	bd38      	pop	{r3, r4, r5, pc}
 8000d8a:	bf00      	nop
 8000d8c:	200001e8 	.word	0x200001e8

08000d90 <_isatty_r>:
 8000d90:	b538      	push	{r3, r4, r5, lr}
 8000d92:	4d06      	ldr	r5, [pc, #24]	@ (8000dac <_isatty_r+0x1c>)
 8000d94:	2300      	movs	r3, #0
 8000d96:	4604      	mov	r4, r0
 8000d98:	4608      	mov	r0, r1
 8000d9a:	602b      	str	r3, [r5, #0]
 8000d9c:	f7ff fb74 	bl	8000488 <_isatty>
 8000da0:	1c43      	adds	r3, r0, #1
 8000da2:	d102      	bne.n	8000daa <_isatty_r+0x1a>
 8000da4:	682b      	ldr	r3, [r5, #0]
 8000da6:	b103      	cbz	r3, 8000daa <_isatty_r+0x1a>
 8000da8:	6023      	str	r3, [r4, #0]
 8000daa:	bd38      	pop	{r3, r4, r5, pc}
 8000dac:	200001e8 	.word	0x200001e8

08000db0 <_lseek_r>:
 8000db0:	b538      	push	{r3, r4, r5, lr}
 8000db2:	4d07      	ldr	r5, [pc, #28]	@ (8000dd0 <_lseek_r+0x20>)
 8000db4:	4604      	mov	r4, r0
 8000db6:	4608      	mov	r0, r1
 8000db8:	4611      	mov	r1, r2
 8000dba:	2200      	movs	r2, #0
 8000dbc:	602a      	str	r2, [r5, #0]
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	f7ff fb6d 	bl	800049e <_lseek>
 8000dc4:	1c43      	adds	r3, r0, #1
 8000dc6:	d102      	bne.n	8000dce <_lseek_r+0x1e>
 8000dc8:	682b      	ldr	r3, [r5, #0]
 8000dca:	b103      	cbz	r3, 8000dce <_lseek_r+0x1e>
 8000dcc:	6023      	str	r3, [r4, #0]
 8000dce:	bd38      	pop	{r3, r4, r5, pc}
 8000dd0:	200001e8 	.word	0x200001e8

08000dd4 <_read_r>:
 8000dd4:	b538      	push	{r3, r4, r5, lr}
 8000dd6:	4d07      	ldr	r5, [pc, #28]	@ (8000df4 <_read_r+0x20>)
 8000dd8:	4604      	mov	r4, r0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	4611      	mov	r1, r2
 8000dde:	2200      	movs	r2, #0
 8000de0:	602a      	str	r2, [r5, #0]
 8000de2:	461a      	mov	r2, r3
 8000de4:	f7ff fafb 	bl	80003de <_read>
 8000de8:	1c43      	adds	r3, r0, #1
 8000dea:	d102      	bne.n	8000df2 <_read_r+0x1e>
 8000dec:	682b      	ldr	r3, [r5, #0]
 8000dee:	b103      	cbz	r3, 8000df2 <_read_r+0x1e>
 8000df0:	6023      	str	r3, [r4, #0]
 8000df2:	bd38      	pop	{r3, r4, r5, pc}
 8000df4:	200001e8 	.word	0x200001e8

08000df8 <_sbrk_r>:
 8000df8:	b538      	push	{r3, r4, r5, lr}
 8000dfa:	4d06      	ldr	r5, [pc, #24]	@ (8000e14 <_sbrk_r+0x1c>)
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	4604      	mov	r4, r0
 8000e00:	4608      	mov	r0, r1
 8000e02:	602b      	str	r3, [r5, #0]
 8000e04:	f7ff fb58 	bl	80004b8 <_sbrk>
 8000e08:	1c43      	adds	r3, r0, #1
 8000e0a:	d102      	bne.n	8000e12 <_sbrk_r+0x1a>
 8000e0c:	682b      	ldr	r3, [r5, #0]
 8000e0e:	b103      	cbz	r3, 8000e12 <_sbrk_r+0x1a>
 8000e10:	6023      	str	r3, [r4, #0]
 8000e12:	bd38      	pop	{r3, r4, r5, pc}
 8000e14:	200001e8 	.word	0x200001e8

08000e18 <_write_r>:
 8000e18:	b538      	push	{r3, r4, r5, lr}
 8000e1a:	4d07      	ldr	r5, [pc, #28]	@ (8000e38 <_write_r+0x20>)
 8000e1c:	4604      	mov	r4, r0
 8000e1e:	4608      	mov	r0, r1
 8000e20:	4611      	mov	r1, r2
 8000e22:	2200      	movs	r2, #0
 8000e24:	602a      	str	r2, [r5, #0]
 8000e26:	461a      	mov	r2, r3
 8000e28:	f7ff faf6 	bl	8000418 <_write>
 8000e2c:	1c43      	adds	r3, r0, #1
 8000e2e:	d102      	bne.n	8000e36 <_write_r+0x1e>
 8000e30:	682b      	ldr	r3, [r5, #0]
 8000e32:	b103      	cbz	r3, 8000e36 <_write_r+0x1e>
 8000e34:	6023      	str	r3, [r4, #0]
 8000e36:	bd38      	pop	{r3, r4, r5, pc}
 8000e38:	200001e8 	.word	0x200001e8

08000e3c <_free_r>:
 8000e3c:	b538      	push	{r3, r4, r5, lr}
 8000e3e:	4605      	mov	r5, r0
 8000e40:	2900      	cmp	r1, #0
 8000e42:	d041      	beq.n	8000ec8 <_free_r+0x8c>
 8000e44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000e48:	1f0c      	subs	r4, r1, #4
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	bfb8      	it	lt
 8000e4e:	18e4      	addlt	r4, r4, r3
 8000e50:	f7ff fe36 	bl	8000ac0 <__malloc_lock>
 8000e54:	4a1d      	ldr	r2, [pc, #116]	@ (8000ecc <_free_r+0x90>)
 8000e56:	6813      	ldr	r3, [r2, #0]
 8000e58:	b933      	cbnz	r3, 8000e68 <_free_r+0x2c>
 8000e5a:	6063      	str	r3, [r4, #4]
 8000e5c:	6014      	str	r4, [r2, #0]
 8000e5e:	4628      	mov	r0, r5
 8000e60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e64:	f7ff be32 	b.w	8000acc <__malloc_unlock>
 8000e68:	42a3      	cmp	r3, r4
 8000e6a:	d908      	bls.n	8000e7e <_free_r+0x42>
 8000e6c:	6820      	ldr	r0, [r4, #0]
 8000e6e:	1821      	adds	r1, r4, r0
 8000e70:	428b      	cmp	r3, r1
 8000e72:	bf01      	itttt	eq
 8000e74:	6819      	ldreq	r1, [r3, #0]
 8000e76:	685b      	ldreq	r3, [r3, #4]
 8000e78:	1809      	addeq	r1, r1, r0
 8000e7a:	6021      	streq	r1, [r4, #0]
 8000e7c:	e7ed      	b.n	8000e5a <_free_r+0x1e>
 8000e7e:	461a      	mov	r2, r3
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	b10b      	cbz	r3, 8000e88 <_free_r+0x4c>
 8000e84:	42a3      	cmp	r3, r4
 8000e86:	d9fa      	bls.n	8000e7e <_free_r+0x42>
 8000e88:	6811      	ldr	r1, [r2, #0]
 8000e8a:	1850      	adds	r0, r2, r1
 8000e8c:	42a0      	cmp	r0, r4
 8000e8e:	d10b      	bne.n	8000ea8 <_free_r+0x6c>
 8000e90:	6820      	ldr	r0, [r4, #0]
 8000e92:	4401      	add	r1, r0
 8000e94:	1850      	adds	r0, r2, r1
 8000e96:	4283      	cmp	r3, r0
 8000e98:	6011      	str	r1, [r2, #0]
 8000e9a:	d1e0      	bne.n	8000e5e <_free_r+0x22>
 8000e9c:	6818      	ldr	r0, [r3, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	6053      	str	r3, [r2, #4]
 8000ea2:	4408      	add	r0, r1
 8000ea4:	6010      	str	r0, [r2, #0]
 8000ea6:	e7da      	b.n	8000e5e <_free_r+0x22>
 8000ea8:	d902      	bls.n	8000eb0 <_free_r+0x74>
 8000eaa:	230c      	movs	r3, #12
 8000eac:	602b      	str	r3, [r5, #0]
 8000eae:	e7d6      	b.n	8000e5e <_free_r+0x22>
 8000eb0:	6820      	ldr	r0, [r4, #0]
 8000eb2:	1821      	adds	r1, r4, r0
 8000eb4:	428b      	cmp	r3, r1
 8000eb6:	bf04      	itt	eq
 8000eb8:	6819      	ldreq	r1, [r3, #0]
 8000eba:	685b      	ldreq	r3, [r3, #4]
 8000ebc:	6063      	str	r3, [r4, #4]
 8000ebe:	bf04      	itt	eq
 8000ec0:	1809      	addeq	r1, r1, r0
 8000ec2:	6021      	streq	r1, [r4, #0]
 8000ec4:	6054      	str	r4, [r2, #4]
 8000ec6:	e7ca      	b.n	8000e5e <_free_r+0x22>
 8000ec8:	bd38      	pop	{r3, r4, r5, pc}
 8000eca:	bf00      	nop
 8000ecc:	200001e4 	.word	0x200001e4

08000ed0 <_init>:
 8000ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ed2:	bf00      	nop
 8000ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ed6:	bc08      	pop	{r3}
 8000ed8:	469e      	mov	lr, r3
 8000eda:	4770      	bx	lr

08000edc <_fini>:
 8000edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ede:	bf00      	nop
 8000ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ee2:	bc08      	pop	{r3}
 8000ee4:	469e      	mov	lr, r3
 8000ee6:	4770      	bx	lr
