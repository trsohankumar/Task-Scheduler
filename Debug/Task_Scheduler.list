
Task_Scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cdc  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08000e74  08000e74  00001e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000eb4  08000eb4  0000206c  2**0
                  CONTENTS
  4 .ARM          00000000  08000eb4  08000eb4  0000206c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000eb4  08000eb4  0000206c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000eb4  08000eb4  00001eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000eb8  08000eb8  00001eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08000ebc  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  2000006c  08000f28  0000206c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  08000f28  000021ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000206c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a82  00000000  00000000  0000209c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003c6  00000000  00000000  00002b1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000160  00000000  00000000  00002ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000f5  00000000  00000000  00003048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002be5  00000000  00000000  0000313d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000146d  00000000  00000000  00005d22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009a1b  00000000  00000000  0000718f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00010baa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ac8  00000000  00000000  00010bf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000116b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000006c 	.word	0x2000006c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000e5c 	.word	0x08000e5c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000070 	.word	0x20000070
 80001d4:	08000e5c 	.word	0x08000e5c

080001d8 <main>:

uint32_t psp_of_tasks[MAX_TASKS] = {TASK_1_STACK_START, TASK_2_STACK_START, TASK_3_STACK_START, TASK_4_STACK_START};
uint32_t task_handlers[MAX_TASKS];

int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0

	// initialize the scheduler
	init_scheduler_stack(SCHED_STACK_START);
 80001dc:	4807      	ldr	r0, [pc, #28]	@ (80001fc <main+0x24>)
 80001de:	f000 f84d 	bl	800027c <init_scheduler_stack>

	// initialize all the stack framses
	init_task_stack();
 80001e2:	f000 f851 	bl	8000288 <init_task_stack>

	init_systick_timer(TICK_HZ);
 80001e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001ea:	f000 f811 	bl	8000210 <init_systick_timer>


	switch_sp_to_psp();
 80001ee:	f000 f8a7 	bl	8000340 <switch_sp_to_psp>


	task1_handler();
 80001f2:	f000 f805 	bl	8000200 <task1_handler>

    /* Loop forever */
	for(;;);
 80001f6:	bf00      	nop
 80001f8:	e7fd      	b.n	80001f6 <main+0x1e>
 80001fa:	bf00      	nop
 80001fc:	2001f000 	.word	0x2001f000

08000200 <task1_handler>:
}


void task1_handler(void) {
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0

	for(;;){

		printf("This is Task1\n");
 8000204:	4801      	ldr	r0, [pc, #4]	@ (800020c <task1_handler+0xc>)
 8000206:	f000 fa95 	bl	8000734 <puts>
 800020a:	e7fb      	b.n	8000204 <task1_handler+0x4>
 800020c:	08000e74 	.word	0x08000e74

08000210 <init_systick_timer>:
		printf("This is Task4\n");
	}
}


void init_systick_timer(uint32_t tick_hz) {
 8000210:	b480      	push	{r7}
 8000212:	b087      	sub	sp, #28
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]

	// accessing the systic registers
	uint32_t * pSYST_RVR = (uint32_t *)0xE000E014;
 8000218:	4b15      	ldr	r3, [pc, #84]	@ (8000270 <init_systick_timer+0x60>)
 800021a:	617b      	str	r3, [r7, #20]
	uint32_t * pSYST_CSR = (uint32_t *)0xE000E010;
 800021c:	4b15      	ldr	r3, [pc, #84]	@ (8000274 <init_systick_timer+0x64>)
 800021e:	613b      	str	r3, [r7, #16]

	uint32_t count_value = (SYSTICK_TIM_CLK / tick_hz) - 1;
 8000220:	4a15      	ldr	r2, [pc, #84]	@ (8000278 <init_systick_timer+0x68>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	fbb2 f3f3 	udiv	r3, r2, r3
 8000228:	3b01      	subs	r3, #1
 800022a:	60fb      	str	r3, [r7, #12]


	// clear the value of SVR
	*pSYST_RVR &= ~(0x00FFFFFFFF);
 800022c:	697b      	ldr	r3, [r7, #20]
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]

	// load the value into the SVR register
	*(pSYST_RVR) |= count_value;
 8000232:	697b      	ldr	r3, [r7, #20]
 8000234:	681a      	ldr	r2, [r3, #0]
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	431a      	orrs	r2, r3
 800023a:	697b      	ldr	r3, [r7, #20]
 800023c:	601a      	str	r2, [r3, #0]

	// Set the clock to the system timer from the processor clock
	*pSYST_CSR |= (1 << 2);
 800023e:	693b      	ldr	r3, [r7, #16]
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	f043 0204 	orr.w	r2, r3, #4
 8000246:	693b      	ldr	r3, [r7, #16]
 8000248:	601a      	str	r2, [r3, #0]
	// Enable exception setting TICKINT  so that exception handler is called
	*pSYST_CSR |= (1 << 1);
 800024a:	693b      	ldr	r3, [r7, #16]
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	f043 0202 	orr.w	r2, r3, #2
 8000252:	693b      	ldr	r3, [r7, #16]
 8000254:	601a      	str	r2, [r3, #0]
	// Enable the counter
	*pSYST_CSR |= (1 << 0);
 8000256:	693b      	ldr	r3, [r7, #16]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f043 0201 	orr.w	r2, r3, #1
 800025e:	693b      	ldr	r3, [r7, #16]
 8000260:	601a      	str	r2, [r3, #0]
}
 8000262:	bf00      	nop
 8000264:	371c      	adds	r7, #28
 8000266:	46bd      	mov	sp, r7
 8000268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	e000e014 	.word	0xe000e014
 8000274:	e000e010 	.word	0xe000e010
 8000278:	00186a00 	.word	0x00186a00

0800027c <init_scheduler_stack>:

__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack)
{
 800027c:	4603      	mov	r3, r0

	// accessing MSP through inline assembly
	__asm volatile("MSR MSP, %0": : "r" (sched_top_of_stack) : );
 800027e:	f383 8808 	msr	MSP, r3

	// go back to main
	__asm volatile("BX LR");
 8000282:	4770      	bx	lr
}
 8000284:	bf00      	nop
	...

08000288 <init_task_stack>:


void init_task_stack(void) {
 8000288:	b480      	push	{r7}
 800028a:	b085      	sub	sp, #20
 800028c:	af00      	add	r7, sp, #0

	// initialize 4 tasks
	uint32_t *psp;

	for (int i = 0; i < MAX_TASKS ; i++)
 800028e:	2300      	movs	r3, #0
 8000290:	60bb      	str	r3, [r7, #8]
 8000292:	e034      	b.n	80002fe <init_task_stack+0x76>
	{
		psp = (uint32_t *) psp_of_tasks[i];
 8000294:	4a1f      	ldr	r2, [pc, #124]	@ (8000314 <init_task_stack+0x8c>)
 8000296:	68bb      	ldr	r3, [r7, #8]
 8000298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800029c:	60fb      	str	r3, [r7, #12]

		// full descending stack so we decrement the pointer first
		(*psp)--;
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	1e5a      	subs	r2, r3, #1
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	601a      	str	r2, [r3, #0]

		// first value is xPsr
		*psp = DUMMY_XPSR;
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80002ae:	601a      	str	r2, [r3, #0]


		// for PC
		psp--;
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	3b04      	subs	r3, #4
 80002b4:	60fb      	str	r3, [r7, #12]
		*psp = (uint32_t *)task_handlers[i];
 80002b6:	4a18      	ldr	r2, [pc, #96]	@ (8000318 <init_task_stack+0x90>)
 80002b8:	68bb      	ldr	r3, [r7, #8]
 80002ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002be:	68fb      	ldr	r3, [r7, #12]
 80002c0:	601a      	str	r2, [r3, #0]


		// for LR
		psp--;
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	3b04      	subs	r3, #4
 80002c6:	60fb      	str	r3, [r7, #12]
		*psp = 0xFFFFFFFD;
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	f06f 0202 	mvn.w	r2, #2
 80002ce:	601a      	str	r2, [r3, #0]


		for (int j = 0; j < 13 ; j++) {
 80002d0:	2300      	movs	r3, #0
 80002d2:	607b      	str	r3, [r7, #4]
 80002d4:	e008      	b.n	80002e8 <init_task_stack+0x60>

			psp--;
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	3b04      	subs	r3, #4
 80002da:	60fb      	str	r3, [r7, #12]
			*psp = 0;
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 13 ; j++) {
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	3301      	adds	r3, #1
 80002e6:	607b      	str	r3, [r7, #4]
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	2b0c      	cmp	r3, #12
 80002ec:	ddf3      	ble.n	80002d6 <init_task_stack+0x4e>
		}


		psp_of_tasks[i] = (uint32_t)psp;
 80002ee:	68fa      	ldr	r2, [r7, #12]
 80002f0:	4908      	ldr	r1, [pc, #32]	@ (8000314 <init_task_stack+0x8c>)
 80002f2:	68bb      	ldr	r3, [r7, #8]
 80002f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < MAX_TASKS ; i++)
 80002f8:	68bb      	ldr	r3, [r7, #8]
 80002fa:	3301      	adds	r3, #1
 80002fc:	60bb      	str	r3, [r7, #8]
 80002fe:	68bb      	ldr	r3, [r7, #8]
 8000300:	2b03      	cmp	r3, #3
 8000302:	ddc7      	ble.n	8000294 <init_task_stack+0xc>


	}
}
 8000304:	bf00      	nop
 8000306:	bf00      	nop
 8000308:	3714      	adds	r7, #20
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	20000000 	.word	0x20000000
 8000318:	20000088 	.word	0x20000088

0800031c <get_psp_value>:

uint8_t current_task = 0;

uint32_t get_psp_value(void) {
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0

	return psp_of_tasks[current_task];
 8000320:	4b05      	ldr	r3, [pc, #20]	@ (8000338 <get_psp_value+0x1c>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	461a      	mov	r2, r3
 8000326:	4b05      	ldr	r3, [pc, #20]	@ (800033c <get_psp_value+0x20>)
 8000328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 800032c:	4618      	mov	r0, r3
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	20000098 	.word	0x20000098
 800033c:	20000000 	.word	0x20000000

08000340 <switch_sp_to_psp>:

__attribute__((naked)) void switch_sp_to_psp(void) {

	// save LR value to prevent corruption
	__asm volatile ("PUSH {LR}");
 8000340:	b500      	push	{lr}
	// initialize the psp with TASK 1 stack start address

	__asm volatile("BL get_psp_value");
 8000342:	f7ff ffeb 	bl	800031c <get_psp_value>

	// the intial stack address is now stored in RO
	__asm volatile ("MSR PSP, R0");
 8000346:	f380 8809 	msr	PSP, r0

	// restore LR value
	__asm volatile ("POP {LR}");
 800034a:	f85d eb04 	ldr.w	lr, [sp], #4

	// change SP to PSP using Control Register
	__asm volatile ("MOV R0, 0x02");
 800034e:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL, R0");
 8000352:	f380 8814 	msr	CONTROL, r0

	// return to main
	__asm volatile("BX LR");
 8000356:	4770      	bx	lr

}
 8000358:	bf00      	nop

0800035a <SysTick_Handler>:

void SysTick_Handler(void) {
 800035a:	b480      	push	{r7}
 800035c:	af00      	add	r7, sp, #0


}
 800035e:	bf00      	nop
 8000360:	46bd      	mov	sp, r7
 8000362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000366:	4770      	bx	lr

08000368 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b086      	sub	sp, #24
 800036c:	af00      	add	r7, sp, #0
 800036e:	60f8      	str	r0, [r7, #12]
 8000370:	60b9      	str	r1, [r7, #8]
 8000372:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000374:	2300      	movs	r3, #0
 8000376:	617b      	str	r3, [r7, #20]
 8000378:	e00a      	b.n	8000390 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800037a:	f3af 8000 	nop.w
 800037e:	4601      	mov	r1, r0
 8000380:	68bb      	ldr	r3, [r7, #8]
 8000382:	1c5a      	adds	r2, r3, #1
 8000384:	60ba      	str	r2, [r7, #8]
 8000386:	b2ca      	uxtb	r2, r1
 8000388:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800038a:	697b      	ldr	r3, [r7, #20]
 800038c:	3301      	adds	r3, #1
 800038e:	617b      	str	r3, [r7, #20]
 8000390:	697a      	ldr	r2, [r7, #20]
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	429a      	cmp	r2, r3
 8000396:	dbf0      	blt.n	800037a <_read+0x12>
  }

  return len;
 8000398:	687b      	ldr	r3, [r7, #4]
}
 800039a:	4618      	mov	r0, r3
 800039c:	3718      	adds	r7, #24
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}

080003a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003a2:	b580      	push	{r7, lr}
 80003a4:	b086      	sub	sp, #24
 80003a6:	af00      	add	r7, sp, #0
 80003a8:	60f8      	str	r0, [r7, #12]
 80003aa:	60b9      	str	r1, [r7, #8]
 80003ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003ae:	2300      	movs	r3, #0
 80003b0:	617b      	str	r3, [r7, #20]
 80003b2:	e009      	b.n	80003c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	1c5a      	adds	r2, r3, #1
 80003b8:	60ba      	str	r2, [r7, #8]
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	4618      	mov	r0, r3
 80003be:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003c2:	697b      	ldr	r3, [r7, #20]
 80003c4:	3301      	adds	r3, #1
 80003c6:	617b      	str	r3, [r7, #20]
 80003c8:	697a      	ldr	r2, [r7, #20]
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	429a      	cmp	r2, r3
 80003ce:	dbf1      	blt.n	80003b4 <_write+0x12>
  }
  return len;
 80003d0:	687b      	ldr	r3, [r7, #4]
}
 80003d2:	4618      	mov	r0, r3
 80003d4:	3718      	adds	r7, #24
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}

080003da <_close>:

int _close(int file)
{
 80003da:	b480      	push	{r7}
 80003dc:	b083      	sub	sp, #12
 80003de:	af00      	add	r7, sp, #0
 80003e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80003e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80003e6:	4618      	mov	r0, r3
 80003e8:	370c      	adds	r7, #12
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr

080003f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003f2:	b480      	push	{r7}
 80003f4:	b083      	sub	sp, #12
 80003f6:	af00      	add	r7, sp, #0
 80003f8:	6078      	str	r0, [r7, #4]
 80003fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80003fc:	683b      	ldr	r3, [r7, #0]
 80003fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000402:	605a      	str	r2, [r3, #4]
  return 0;
 8000404:	2300      	movs	r3, #0
}
 8000406:	4618      	mov	r0, r3
 8000408:	370c      	adds	r7, #12
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr

08000412 <_isatty>:

int _isatty(int file)
{
 8000412:	b480      	push	{r7}
 8000414:	b083      	sub	sp, #12
 8000416:	af00      	add	r7, sp, #0
 8000418:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800041a:	2301      	movs	r3, #1
}
 800041c:	4618      	mov	r0, r3
 800041e:	370c      	adds	r7, #12
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr

08000428 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000428:	b480      	push	{r7}
 800042a:	b085      	sub	sp, #20
 800042c:	af00      	add	r7, sp, #0
 800042e:	60f8      	str	r0, [r7, #12]
 8000430:	60b9      	str	r1, [r7, #8]
 8000432:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000434:	2300      	movs	r3, #0
}
 8000436:	4618      	mov	r0, r3
 8000438:	3714      	adds	r7, #20
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr
	...

08000444 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b086      	sub	sp, #24
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800044c:	4a14      	ldr	r2, [pc, #80]	@ (80004a0 <_sbrk+0x5c>)
 800044e:	4b15      	ldr	r3, [pc, #84]	@ (80004a4 <_sbrk+0x60>)
 8000450:	1ad3      	subs	r3, r2, r3
 8000452:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000454:	697b      	ldr	r3, [r7, #20]
 8000456:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000458:	4b13      	ldr	r3, [pc, #76]	@ (80004a8 <_sbrk+0x64>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d102      	bne.n	8000466 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000460:	4b11      	ldr	r3, [pc, #68]	@ (80004a8 <_sbrk+0x64>)
 8000462:	4a12      	ldr	r2, [pc, #72]	@ (80004ac <_sbrk+0x68>)
 8000464:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000466:	4b10      	ldr	r3, [pc, #64]	@ (80004a8 <_sbrk+0x64>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4413      	add	r3, r2
 800046e:	693a      	ldr	r2, [r7, #16]
 8000470:	429a      	cmp	r2, r3
 8000472:	d207      	bcs.n	8000484 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000474:	f000 f96e 	bl	8000754 <__errno>
 8000478:	4603      	mov	r3, r0
 800047a:	220c      	movs	r2, #12
 800047c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800047e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000482:	e009      	b.n	8000498 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000484:	4b08      	ldr	r3, [pc, #32]	@ (80004a8 <_sbrk+0x64>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800048a:	4b07      	ldr	r3, [pc, #28]	@ (80004a8 <_sbrk+0x64>)
 800048c:	681a      	ldr	r2, [r3, #0]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4413      	add	r3, r2
 8000492:	4a05      	ldr	r2, [pc, #20]	@ (80004a8 <_sbrk+0x64>)
 8000494:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000496:	68fb      	ldr	r3, [r7, #12]
}
 8000498:	4618      	mov	r0, r3
 800049a:	3718      	adds	r7, #24
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	20020000 	.word	0x20020000
 80004a4:	00000400 	.word	0x00000400
 80004a8:	2000009c 	.word	0x2000009c
 80004ac:	200001f0 	.word	0x200001f0

080004b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004b0:	480d      	ldr	r0, [pc, #52]	@ (80004e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004b8:	480c      	ldr	r0, [pc, #48]	@ (80004ec <LoopForever+0x6>)
  ldr r1, =_edata
 80004ba:	490d      	ldr	r1, [pc, #52]	@ (80004f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004bc:	4a0d      	ldr	r2, [pc, #52]	@ (80004f4 <LoopForever+0xe>)
  movs r3, #0
 80004be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004c0:	e002      	b.n	80004c8 <LoopCopyDataInit>

080004c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004c6:	3304      	adds	r3, #4

080004c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004cc:	d3f9      	bcc.n	80004c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ce:	4a0a      	ldr	r2, [pc, #40]	@ (80004f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004d0:	4c0a      	ldr	r4, [pc, #40]	@ (80004fc <LoopForever+0x16>)
  movs r3, #0
 80004d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004d4:	e001      	b.n	80004da <LoopFillZerobss>

080004d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004d8:	3204      	adds	r2, #4

080004da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004dc:	d3fb      	bcc.n	80004d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004de:	f000 f93f 	bl	8000760 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004e2:	f7ff fe79 	bl	80001d8 <main>

080004e6 <LoopForever>:

LoopForever:
  b LoopForever
 80004e6:	e7fe      	b.n	80004e6 <LoopForever>
  ldr   r0, =_estack
 80004e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004f0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80004f4:	08000ebc 	.word	0x08000ebc
  ldr r2, =_sbss
 80004f8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80004fc:	200001ec 	.word	0x200001ec

08000500 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000500:	e7fe      	b.n	8000500 <ADC_IRQHandler>
	...

08000504 <std>:
 8000504:	2300      	movs	r3, #0
 8000506:	b510      	push	{r4, lr}
 8000508:	4604      	mov	r4, r0
 800050a:	e9c0 3300 	strd	r3, r3, [r0]
 800050e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000512:	6083      	str	r3, [r0, #8]
 8000514:	8181      	strh	r1, [r0, #12]
 8000516:	6643      	str	r3, [r0, #100]	@ 0x64
 8000518:	81c2      	strh	r2, [r0, #14]
 800051a:	6183      	str	r3, [r0, #24]
 800051c:	4619      	mov	r1, r3
 800051e:	2208      	movs	r2, #8
 8000520:	305c      	adds	r0, #92	@ 0x5c
 8000522:	f000 f90f 	bl	8000744 <memset>
 8000526:	4b0d      	ldr	r3, [pc, #52]	@ (800055c <std+0x58>)
 8000528:	6263      	str	r3, [r4, #36]	@ 0x24
 800052a:	4b0d      	ldr	r3, [pc, #52]	@ (8000560 <std+0x5c>)
 800052c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800052e:	4b0d      	ldr	r3, [pc, #52]	@ (8000564 <std+0x60>)
 8000530:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000532:	4b0d      	ldr	r3, [pc, #52]	@ (8000568 <std+0x64>)
 8000534:	6323      	str	r3, [r4, #48]	@ 0x30
 8000536:	4b0d      	ldr	r3, [pc, #52]	@ (800056c <std+0x68>)
 8000538:	6224      	str	r4, [r4, #32]
 800053a:	429c      	cmp	r4, r3
 800053c:	d006      	beq.n	800054c <std+0x48>
 800053e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000542:	4294      	cmp	r4, r2
 8000544:	d002      	beq.n	800054c <std+0x48>
 8000546:	33d0      	adds	r3, #208	@ 0xd0
 8000548:	429c      	cmp	r4, r3
 800054a:	d105      	bne.n	8000558 <std+0x54>
 800054c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000554:	f000 b928 	b.w	80007a8 <__retarget_lock_init_recursive>
 8000558:	bd10      	pop	{r4, pc}
 800055a:	bf00      	nop
 800055c:	08000a65 	.word	0x08000a65
 8000560:	08000a87 	.word	0x08000a87
 8000564:	08000abf 	.word	0x08000abf
 8000568:	08000ae3 	.word	0x08000ae3
 800056c:	200000a0 	.word	0x200000a0

08000570 <stdio_exit_handler>:
 8000570:	4a02      	ldr	r2, [pc, #8]	@ (800057c <stdio_exit_handler+0xc>)
 8000572:	4903      	ldr	r1, [pc, #12]	@ (8000580 <stdio_exit_handler+0x10>)
 8000574:	4803      	ldr	r0, [pc, #12]	@ (8000584 <stdio_exit_handler+0x14>)
 8000576:	f000 b869 	b.w	800064c <_fwalk_sglue>
 800057a:	bf00      	nop
 800057c:	20000010 	.word	0x20000010
 8000580:	080009fd 	.word	0x080009fd
 8000584:	20000020 	.word	0x20000020

08000588 <cleanup_stdio>:
 8000588:	6841      	ldr	r1, [r0, #4]
 800058a:	4b0c      	ldr	r3, [pc, #48]	@ (80005bc <cleanup_stdio+0x34>)
 800058c:	4299      	cmp	r1, r3
 800058e:	b510      	push	{r4, lr}
 8000590:	4604      	mov	r4, r0
 8000592:	d001      	beq.n	8000598 <cleanup_stdio+0x10>
 8000594:	f000 fa32 	bl	80009fc <_fflush_r>
 8000598:	68a1      	ldr	r1, [r4, #8]
 800059a:	4b09      	ldr	r3, [pc, #36]	@ (80005c0 <cleanup_stdio+0x38>)
 800059c:	4299      	cmp	r1, r3
 800059e:	d002      	beq.n	80005a6 <cleanup_stdio+0x1e>
 80005a0:	4620      	mov	r0, r4
 80005a2:	f000 fa2b 	bl	80009fc <_fflush_r>
 80005a6:	68e1      	ldr	r1, [r4, #12]
 80005a8:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <cleanup_stdio+0x3c>)
 80005aa:	4299      	cmp	r1, r3
 80005ac:	d004      	beq.n	80005b8 <cleanup_stdio+0x30>
 80005ae:	4620      	mov	r0, r4
 80005b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005b4:	f000 ba22 	b.w	80009fc <_fflush_r>
 80005b8:	bd10      	pop	{r4, pc}
 80005ba:	bf00      	nop
 80005bc:	200000a0 	.word	0x200000a0
 80005c0:	20000108 	.word	0x20000108
 80005c4:	20000170 	.word	0x20000170

080005c8 <global_stdio_init.part.0>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	4b0b      	ldr	r3, [pc, #44]	@ (80005f8 <global_stdio_init.part.0+0x30>)
 80005cc:	4c0b      	ldr	r4, [pc, #44]	@ (80005fc <global_stdio_init.part.0+0x34>)
 80005ce:	4a0c      	ldr	r2, [pc, #48]	@ (8000600 <global_stdio_init.part.0+0x38>)
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	4620      	mov	r0, r4
 80005d4:	2200      	movs	r2, #0
 80005d6:	2104      	movs	r1, #4
 80005d8:	f7ff ff94 	bl	8000504 <std>
 80005dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80005e0:	2201      	movs	r2, #1
 80005e2:	2109      	movs	r1, #9
 80005e4:	f7ff ff8e 	bl	8000504 <std>
 80005e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80005ec:	2202      	movs	r2, #2
 80005ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005f2:	2112      	movs	r1, #18
 80005f4:	f7ff bf86 	b.w	8000504 <std>
 80005f8:	200001d8 	.word	0x200001d8
 80005fc:	200000a0 	.word	0x200000a0
 8000600:	08000571 	.word	0x08000571

08000604 <__sfp_lock_acquire>:
 8000604:	4801      	ldr	r0, [pc, #4]	@ (800060c <__sfp_lock_acquire+0x8>)
 8000606:	f000 b8d0 	b.w	80007aa <__retarget_lock_acquire_recursive>
 800060a:	bf00      	nop
 800060c:	200001dd 	.word	0x200001dd

08000610 <__sfp_lock_release>:
 8000610:	4801      	ldr	r0, [pc, #4]	@ (8000618 <__sfp_lock_release+0x8>)
 8000612:	f000 b8cb 	b.w	80007ac <__retarget_lock_release_recursive>
 8000616:	bf00      	nop
 8000618:	200001dd 	.word	0x200001dd

0800061c <__sinit>:
 800061c:	b510      	push	{r4, lr}
 800061e:	4604      	mov	r4, r0
 8000620:	f7ff fff0 	bl	8000604 <__sfp_lock_acquire>
 8000624:	6a23      	ldr	r3, [r4, #32]
 8000626:	b11b      	cbz	r3, 8000630 <__sinit+0x14>
 8000628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800062c:	f7ff bff0 	b.w	8000610 <__sfp_lock_release>
 8000630:	4b04      	ldr	r3, [pc, #16]	@ (8000644 <__sinit+0x28>)
 8000632:	6223      	str	r3, [r4, #32]
 8000634:	4b04      	ldr	r3, [pc, #16]	@ (8000648 <__sinit+0x2c>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d1f5      	bne.n	8000628 <__sinit+0xc>
 800063c:	f7ff ffc4 	bl	80005c8 <global_stdio_init.part.0>
 8000640:	e7f2      	b.n	8000628 <__sinit+0xc>
 8000642:	bf00      	nop
 8000644:	08000589 	.word	0x08000589
 8000648:	200001d8 	.word	0x200001d8

0800064c <_fwalk_sglue>:
 800064c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000650:	4607      	mov	r7, r0
 8000652:	4688      	mov	r8, r1
 8000654:	4614      	mov	r4, r2
 8000656:	2600      	movs	r6, #0
 8000658:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800065c:	f1b9 0901 	subs.w	r9, r9, #1
 8000660:	d505      	bpl.n	800066e <_fwalk_sglue+0x22>
 8000662:	6824      	ldr	r4, [r4, #0]
 8000664:	2c00      	cmp	r4, #0
 8000666:	d1f7      	bne.n	8000658 <_fwalk_sglue+0xc>
 8000668:	4630      	mov	r0, r6
 800066a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800066e:	89ab      	ldrh	r3, [r5, #12]
 8000670:	2b01      	cmp	r3, #1
 8000672:	d907      	bls.n	8000684 <_fwalk_sglue+0x38>
 8000674:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000678:	3301      	adds	r3, #1
 800067a:	d003      	beq.n	8000684 <_fwalk_sglue+0x38>
 800067c:	4629      	mov	r1, r5
 800067e:	4638      	mov	r0, r7
 8000680:	47c0      	blx	r8
 8000682:	4306      	orrs	r6, r0
 8000684:	3568      	adds	r5, #104	@ 0x68
 8000686:	e7e9      	b.n	800065c <_fwalk_sglue+0x10>

08000688 <_puts_r>:
 8000688:	6a03      	ldr	r3, [r0, #32]
 800068a:	b570      	push	{r4, r5, r6, lr}
 800068c:	6884      	ldr	r4, [r0, #8]
 800068e:	4605      	mov	r5, r0
 8000690:	460e      	mov	r6, r1
 8000692:	b90b      	cbnz	r3, 8000698 <_puts_r+0x10>
 8000694:	f7ff ffc2 	bl	800061c <__sinit>
 8000698:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800069a:	07db      	lsls	r3, r3, #31
 800069c:	d405      	bmi.n	80006aa <_puts_r+0x22>
 800069e:	89a3      	ldrh	r3, [r4, #12]
 80006a0:	0598      	lsls	r0, r3, #22
 80006a2:	d402      	bmi.n	80006aa <_puts_r+0x22>
 80006a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80006a6:	f000 f880 	bl	80007aa <__retarget_lock_acquire_recursive>
 80006aa:	89a3      	ldrh	r3, [r4, #12]
 80006ac:	0719      	lsls	r1, r3, #28
 80006ae:	d502      	bpl.n	80006b6 <_puts_r+0x2e>
 80006b0:	6923      	ldr	r3, [r4, #16]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d135      	bne.n	8000722 <_puts_r+0x9a>
 80006b6:	4621      	mov	r1, r4
 80006b8:	4628      	mov	r0, r5
 80006ba:	f000 fa55 	bl	8000b68 <__swsetup_r>
 80006be:	b380      	cbz	r0, 8000722 <_puts_r+0x9a>
 80006c0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80006c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80006c6:	07da      	lsls	r2, r3, #31
 80006c8:	d405      	bmi.n	80006d6 <_puts_r+0x4e>
 80006ca:	89a3      	ldrh	r3, [r4, #12]
 80006cc:	059b      	lsls	r3, r3, #22
 80006ce:	d402      	bmi.n	80006d6 <_puts_r+0x4e>
 80006d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80006d2:	f000 f86b 	bl	80007ac <__retarget_lock_release_recursive>
 80006d6:	4628      	mov	r0, r5
 80006d8:	bd70      	pop	{r4, r5, r6, pc}
 80006da:	2b00      	cmp	r3, #0
 80006dc:	da04      	bge.n	80006e8 <_puts_r+0x60>
 80006de:	69a2      	ldr	r2, [r4, #24]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	dc17      	bgt.n	8000714 <_puts_r+0x8c>
 80006e4:	290a      	cmp	r1, #10
 80006e6:	d015      	beq.n	8000714 <_puts_r+0x8c>
 80006e8:	6823      	ldr	r3, [r4, #0]
 80006ea:	1c5a      	adds	r2, r3, #1
 80006ec:	6022      	str	r2, [r4, #0]
 80006ee:	7019      	strb	r1, [r3, #0]
 80006f0:	68a3      	ldr	r3, [r4, #8]
 80006f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80006f6:	3b01      	subs	r3, #1
 80006f8:	60a3      	str	r3, [r4, #8]
 80006fa:	2900      	cmp	r1, #0
 80006fc:	d1ed      	bne.n	80006da <_puts_r+0x52>
 80006fe:	2b00      	cmp	r3, #0
 8000700:	da11      	bge.n	8000726 <_puts_r+0x9e>
 8000702:	4622      	mov	r2, r4
 8000704:	210a      	movs	r1, #10
 8000706:	4628      	mov	r0, r5
 8000708:	f000 f9ef 	bl	8000aea <__swbuf_r>
 800070c:	3001      	adds	r0, #1
 800070e:	d0d7      	beq.n	80006c0 <_puts_r+0x38>
 8000710:	250a      	movs	r5, #10
 8000712:	e7d7      	b.n	80006c4 <_puts_r+0x3c>
 8000714:	4622      	mov	r2, r4
 8000716:	4628      	mov	r0, r5
 8000718:	f000 f9e7 	bl	8000aea <__swbuf_r>
 800071c:	3001      	adds	r0, #1
 800071e:	d1e7      	bne.n	80006f0 <_puts_r+0x68>
 8000720:	e7ce      	b.n	80006c0 <_puts_r+0x38>
 8000722:	3e01      	subs	r6, #1
 8000724:	e7e4      	b.n	80006f0 <_puts_r+0x68>
 8000726:	6823      	ldr	r3, [r4, #0]
 8000728:	1c5a      	adds	r2, r3, #1
 800072a:	6022      	str	r2, [r4, #0]
 800072c:	220a      	movs	r2, #10
 800072e:	701a      	strb	r2, [r3, #0]
 8000730:	e7ee      	b.n	8000710 <_puts_r+0x88>
	...

08000734 <puts>:
 8000734:	4b02      	ldr	r3, [pc, #8]	@ (8000740 <puts+0xc>)
 8000736:	4601      	mov	r1, r0
 8000738:	6818      	ldr	r0, [r3, #0]
 800073a:	f7ff bfa5 	b.w	8000688 <_puts_r>
 800073e:	bf00      	nop
 8000740:	2000001c 	.word	0x2000001c

08000744 <memset>:
 8000744:	4402      	add	r2, r0
 8000746:	4603      	mov	r3, r0
 8000748:	4293      	cmp	r3, r2
 800074a:	d100      	bne.n	800074e <memset+0xa>
 800074c:	4770      	bx	lr
 800074e:	f803 1b01 	strb.w	r1, [r3], #1
 8000752:	e7f9      	b.n	8000748 <memset+0x4>

08000754 <__errno>:
 8000754:	4b01      	ldr	r3, [pc, #4]	@ (800075c <__errno+0x8>)
 8000756:	6818      	ldr	r0, [r3, #0]
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	2000001c 	.word	0x2000001c

08000760 <__libc_init_array>:
 8000760:	b570      	push	{r4, r5, r6, lr}
 8000762:	4d0d      	ldr	r5, [pc, #52]	@ (8000798 <__libc_init_array+0x38>)
 8000764:	4c0d      	ldr	r4, [pc, #52]	@ (800079c <__libc_init_array+0x3c>)
 8000766:	1b64      	subs	r4, r4, r5
 8000768:	10a4      	asrs	r4, r4, #2
 800076a:	2600      	movs	r6, #0
 800076c:	42a6      	cmp	r6, r4
 800076e:	d109      	bne.n	8000784 <__libc_init_array+0x24>
 8000770:	4d0b      	ldr	r5, [pc, #44]	@ (80007a0 <__libc_init_array+0x40>)
 8000772:	4c0c      	ldr	r4, [pc, #48]	@ (80007a4 <__libc_init_array+0x44>)
 8000774:	f000 fb72 	bl	8000e5c <_init>
 8000778:	1b64      	subs	r4, r4, r5
 800077a:	10a4      	asrs	r4, r4, #2
 800077c:	2600      	movs	r6, #0
 800077e:	42a6      	cmp	r6, r4
 8000780:	d105      	bne.n	800078e <__libc_init_array+0x2e>
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f855 3b04 	ldr.w	r3, [r5], #4
 8000788:	4798      	blx	r3
 800078a:	3601      	adds	r6, #1
 800078c:	e7ee      	b.n	800076c <__libc_init_array+0xc>
 800078e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000792:	4798      	blx	r3
 8000794:	3601      	adds	r6, #1
 8000796:	e7f2      	b.n	800077e <__libc_init_array+0x1e>
 8000798:	08000eb4 	.word	0x08000eb4
 800079c:	08000eb4 	.word	0x08000eb4
 80007a0:	08000eb4 	.word	0x08000eb4
 80007a4:	08000eb8 	.word	0x08000eb8

080007a8 <__retarget_lock_init_recursive>:
 80007a8:	4770      	bx	lr

080007aa <__retarget_lock_acquire_recursive>:
 80007aa:	4770      	bx	lr

080007ac <__retarget_lock_release_recursive>:
 80007ac:	4770      	bx	lr
	...

080007b0 <sbrk_aligned>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	4e0f      	ldr	r6, [pc, #60]	@ (80007f0 <sbrk_aligned+0x40>)
 80007b4:	460c      	mov	r4, r1
 80007b6:	6831      	ldr	r1, [r6, #0]
 80007b8:	4605      	mov	r5, r0
 80007ba:	b911      	cbnz	r1, 80007c2 <sbrk_aligned+0x12>
 80007bc:	f000 fae2 	bl	8000d84 <_sbrk_r>
 80007c0:	6030      	str	r0, [r6, #0]
 80007c2:	4621      	mov	r1, r4
 80007c4:	4628      	mov	r0, r5
 80007c6:	f000 fadd 	bl	8000d84 <_sbrk_r>
 80007ca:	1c43      	adds	r3, r0, #1
 80007cc:	d103      	bne.n	80007d6 <sbrk_aligned+0x26>
 80007ce:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80007d2:	4620      	mov	r0, r4
 80007d4:	bd70      	pop	{r4, r5, r6, pc}
 80007d6:	1cc4      	adds	r4, r0, #3
 80007d8:	f024 0403 	bic.w	r4, r4, #3
 80007dc:	42a0      	cmp	r0, r4
 80007de:	d0f8      	beq.n	80007d2 <sbrk_aligned+0x22>
 80007e0:	1a21      	subs	r1, r4, r0
 80007e2:	4628      	mov	r0, r5
 80007e4:	f000 face 	bl	8000d84 <_sbrk_r>
 80007e8:	3001      	adds	r0, #1
 80007ea:	d1f2      	bne.n	80007d2 <sbrk_aligned+0x22>
 80007ec:	e7ef      	b.n	80007ce <sbrk_aligned+0x1e>
 80007ee:	bf00      	nop
 80007f0:	200001e0 	.word	0x200001e0

080007f4 <_malloc_r>:
 80007f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007f8:	1ccd      	adds	r5, r1, #3
 80007fa:	f025 0503 	bic.w	r5, r5, #3
 80007fe:	3508      	adds	r5, #8
 8000800:	2d0c      	cmp	r5, #12
 8000802:	bf38      	it	cc
 8000804:	250c      	movcc	r5, #12
 8000806:	2d00      	cmp	r5, #0
 8000808:	4606      	mov	r6, r0
 800080a:	db01      	blt.n	8000810 <_malloc_r+0x1c>
 800080c:	42a9      	cmp	r1, r5
 800080e:	d904      	bls.n	800081a <_malloc_r+0x26>
 8000810:	230c      	movs	r3, #12
 8000812:	6033      	str	r3, [r6, #0]
 8000814:	2000      	movs	r0, #0
 8000816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800081a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80008f0 <_malloc_r+0xfc>
 800081e:	f000 f915 	bl	8000a4c <__malloc_lock>
 8000822:	f8d8 3000 	ldr.w	r3, [r8]
 8000826:	461c      	mov	r4, r3
 8000828:	bb44      	cbnz	r4, 800087c <_malloc_r+0x88>
 800082a:	4629      	mov	r1, r5
 800082c:	4630      	mov	r0, r6
 800082e:	f7ff ffbf 	bl	80007b0 <sbrk_aligned>
 8000832:	1c43      	adds	r3, r0, #1
 8000834:	4604      	mov	r4, r0
 8000836:	d158      	bne.n	80008ea <_malloc_r+0xf6>
 8000838:	f8d8 4000 	ldr.w	r4, [r8]
 800083c:	4627      	mov	r7, r4
 800083e:	2f00      	cmp	r7, #0
 8000840:	d143      	bne.n	80008ca <_malloc_r+0xd6>
 8000842:	2c00      	cmp	r4, #0
 8000844:	d04b      	beq.n	80008de <_malloc_r+0xea>
 8000846:	6823      	ldr	r3, [r4, #0]
 8000848:	4639      	mov	r1, r7
 800084a:	4630      	mov	r0, r6
 800084c:	eb04 0903 	add.w	r9, r4, r3
 8000850:	f000 fa98 	bl	8000d84 <_sbrk_r>
 8000854:	4581      	cmp	r9, r0
 8000856:	d142      	bne.n	80008de <_malloc_r+0xea>
 8000858:	6821      	ldr	r1, [r4, #0]
 800085a:	1a6d      	subs	r5, r5, r1
 800085c:	4629      	mov	r1, r5
 800085e:	4630      	mov	r0, r6
 8000860:	f7ff ffa6 	bl	80007b0 <sbrk_aligned>
 8000864:	3001      	adds	r0, #1
 8000866:	d03a      	beq.n	80008de <_malloc_r+0xea>
 8000868:	6823      	ldr	r3, [r4, #0]
 800086a:	442b      	add	r3, r5
 800086c:	6023      	str	r3, [r4, #0]
 800086e:	f8d8 3000 	ldr.w	r3, [r8]
 8000872:	685a      	ldr	r2, [r3, #4]
 8000874:	bb62      	cbnz	r2, 80008d0 <_malloc_r+0xdc>
 8000876:	f8c8 7000 	str.w	r7, [r8]
 800087a:	e00f      	b.n	800089c <_malloc_r+0xa8>
 800087c:	6822      	ldr	r2, [r4, #0]
 800087e:	1b52      	subs	r2, r2, r5
 8000880:	d420      	bmi.n	80008c4 <_malloc_r+0xd0>
 8000882:	2a0b      	cmp	r2, #11
 8000884:	d917      	bls.n	80008b6 <_malloc_r+0xc2>
 8000886:	1961      	adds	r1, r4, r5
 8000888:	42a3      	cmp	r3, r4
 800088a:	6025      	str	r5, [r4, #0]
 800088c:	bf18      	it	ne
 800088e:	6059      	strne	r1, [r3, #4]
 8000890:	6863      	ldr	r3, [r4, #4]
 8000892:	bf08      	it	eq
 8000894:	f8c8 1000 	streq.w	r1, [r8]
 8000898:	5162      	str	r2, [r4, r5]
 800089a:	604b      	str	r3, [r1, #4]
 800089c:	4630      	mov	r0, r6
 800089e:	f000 f8db 	bl	8000a58 <__malloc_unlock>
 80008a2:	f104 000b 	add.w	r0, r4, #11
 80008a6:	1d23      	adds	r3, r4, #4
 80008a8:	f020 0007 	bic.w	r0, r0, #7
 80008ac:	1ac2      	subs	r2, r0, r3
 80008ae:	bf1c      	itt	ne
 80008b0:	1a1b      	subne	r3, r3, r0
 80008b2:	50a3      	strne	r3, [r4, r2]
 80008b4:	e7af      	b.n	8000816 <_malloc_r+0x22>
 80008b6:	6862      	ldr	r2, [r4, #4]
 80008b8:	42a3      	cmp	r3, r4
 80008ba:	bf0c      	ite	eq
 80008bc:	f8c8 2000 	streq.w	r2, [r8]
 80008c0:	605a      	strne	r2, [r3, #4]
 80008c2:	e7eb      	b.n	800089c <_malloc_r+0xa8>
 80008c4:	4623      	mov	r3, r4
 80008c6:	6864      	ldr	r4, [r4, #4]
 80008c8:	e7ae      	b.n	8000828 <_malloc_r+0x34>
 80008ca:	463c      	mov	r4, r7
 80008cc:	687f      	ldr	r7, [r7, #4]
 80008ce:	e7b6      	b.n	800083e <_malloc_r+0x4a>
 80008d0:	461a      	mov	r2, r3
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	42a3      	cmp	r3, r4
 80008d6:	d1fb      	bne.n	80008d0 <_malloc_r+0xdc>
 80008d8:	2300      	movs	r3, #0
 80008da:	6053      	str	r3, [r2, #4]
 80008dc:	e7de      	b.n	800089c <_malloc_r+0xa8>
 80008de:	230c      	movs	r3, #12
 80008e0:	6033      	str	r3, [r6, #0]
 80008e2:	4630      	mov	r0, r6
 80008e4:	f000 f8b8 	bl	8000a58 <__malloc_unlock>
 80008e8:	e794      	b.n	8000814 <_malloc_r+0x20>
 80008ea:	6005      	str	r5, [r0, #0]
 80008ec:	e7d6      	b.n	800089c <_malloc_r+0xa8>
 80008ee:	bf00      	nop
 80008f0:	200001e4 	.word	0x200001e4

080008f4 <__sflush_r>:
 80008f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80008f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008fc:	0716      	lsls	r6, r2, #28
 80008fe:	4605      	mov	r5, r0
 8000900:	460c      	mov	r4, r1
 8000902:	d454      	bmi.n	80009ae <__sflush_r+0xba>
 8000904:	684b      	ldr	r3, [r1, #4]
 8000906:	2b00      	cmp	r3, #0
 8000908:	dc02      	bgt.n	8000910 <__sflush_r+0x1c>
 800090a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800090c:	2b00      	cmp	r3, #0
 800090e:	dd48      	ble.n	80009a2 <__sflush_r+0xae>
 8000910:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000912:	2e00      	cmp	r6, #0
 8000914:	d045      	beq.n	80009a2 <__sflush_r+0xae>
 8000916:	2300      	movs	r3, #0
 8000918:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800091c:	682f      	ldr	r7, [r5, #0]
 800091e:	6a21      	ldr	r1, [r4, #32]
 8000920:	602b      	str	r3, [r5, #0]
 8000922:	d030      	beq.n	8000986 <__sflush_r+0x92>
 8000924:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000926:	89a3      	ldrh	r3, [r4, #12]
 8000928:	0759      	lsls	r1, r3, #29
 800092a:	d505      	bpl.n	8000938 <__sflush_r+0x44>
 800092c:	6863      	ldr	r3, [r4, #4]
 800092e:	1ad2      	subs	r2, r2, r3
 8000930:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000932:	b10b      	cbz	r3, 8000938 <__sflush_r+0x44>
 8000934:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000936:	1ad2      	subs	r2, r2, r3
 8000938:	2300      	movs	r3, #0
 800093a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800093c:	6a21      	ldr	r1, [r4, #32]
 800093e:	4628      	mov	r0, r5
 8000940:	47b0      	blx	r6
 8000942:	1c43      	adds	r3, r0, #1
 8000944:	89a3      	ldrh	r3, [r4, #12]
 8000946:	d106      	bne.n	8000956 <__sflush_r+0x62>
 8000948:	6829      	ldr	r1, [r5, #0]
 800094a:	291d      	cmp	r1, #29
 800094c:	d82b      	bhi.n	80009a6 <__sflush_r+0xb2>
 800094e:	4a2a      	ldr	r2, [pc, #168]	@ (80009f8 <__sflush_r+0x104>)
 8000950:	410a      	asrs	r2, r1
 8000952:	07d6      	lsls	r6, r2, #31
 8000954:	d427      	bmi.n	80009a6 <__sflush_r+0xb2>
 8000956:	2200      	movs	r2, #0
 8000958:	6062      	str	r2, [r4, #4]
 800095a:	04d9      	lsls	r1, r3, #19
 800095c:	6922      	ldr	r2, [r4, #16]
 800095e:	6022      	str	r2, [r4, #0]
 8000960:	d504      	bpl.n	800096c <__sflush_r+0x78>
 8000962:	1c42      	adds	r2, r0, #1
 8000964:	d101      	bne.n	800096a <__sflush_r+0x76>
 8000966:	682b      	ldr	r3, [r5, #0]
 8000968:	b903      	cbnz	r3, 800096c <__sflush_r+0x78>
 800096a:	6560      	str	r0, [r4, #84]	@ 0x54
 800096c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800096e:	602f      	str	r7, [r5, #0]
 8000970:	b1b9      	cbz	r1, 80009a2 <__sflush_r+0xae>
 8000972:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000976:	4299      	cmp	r1, r3
 8000978:	d002      	beq.n	8000980 <__sflush_r+0x8c>
 800097a:	4628      	mov	r0, r5
 800097c:	f000 fa24 	bl	8000dc8 <_free_r>
 8000980:	2300      	movs	r3, #0
 8000982:	6363      	str	r3, [r4, #52]	@ 0x34
 8000984:	e00d      	b.n	80009a2 <__sflush_r+0xae>
 8000986:	2301      	movs	r3, #1
 8000988:	4628      	mov	r0, r5
 800098a:	47b0      	blx	r6
 800098c:	4602      	mov	r2, r0
 800098e:	1c50      	adds	r0, r2, #1
 8000990:	d1c9      	bne.n	8000926 <__sflush_r+0x32>
 8000992:	682b      	ldr	r3, [r5, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d0c6      	beq.n	8000926 <__sflush_r+0x32>
 8000998:	2b1d      	cmp	r3, #29
 800099a:	d001      	beq.n	80009a0 <__sflush_r+0xac>
 800099c:	2b16      	cmp	r3, #22
 800099e:	d11e      	bne.n	80009de <__sflush_r+0xea>
 80009a0:	602f      	str	r7, [r5, #0]
 80009a2:	2000      	movs	r0, #0
 80009a4:	e022      	b.n	80009ec <__sflush_r+0xf8>
 80009a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009aa:	b21b      	sxth	r3, r3
 80009ac:	e01b      	b.n	80009e6 <__sflush_r+0xf2>
 80009ae:	690f      	ldr	r7, [r1, #16]
 80009b0:	2f00      	cmp	r7, #0
 80009b2:	d0f6      	beq.n	80009a2 <__sflush_r+0xae>
 80009b4:	0793      	lsls	r3, r2, #30
 80009b6:	680e      	ldr	r6, [r1, #0]
 80009b8:	bf08      	it	eq
 80009ba:	694b      	ldreq	r3, [r1, #20]
 80009bc:	600f      	str	r7, [r1, #0]
 80009be:	bf18      	it	ne
 80009c0:	2300      	movne	r3, #0
 80009c2:	eba6 0807 	sub.w	r8, r6, r7
 80009c6:	608b      	str	r3, [r1, #8]
 80009c8:	f1b8 0f00 	cmp.w	r8, #0
 80009cc:	dde9      	ble.n	80009a2 <__sflush_r+0xae>
 80009ce:	6a21      	ldr	r1, [r4, #32]
 80009d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80009d2:	4643      	mov	r3, r8
 80009d4:	463a      	mov	r2, r7
 80009d6:	4628      	mov	r0, r5
 80009d8:	47b0      	blx	r6
 80009da:	2800      	cmp	r0, #0
 80009dc:	dc08      	bgt.n	80009f0 <__sflush_r+0xfc>
 80009de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80009e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009e6:	81a3      	strh	r3, [r4, #12]
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80009f0:	4407      	add	r7, r0
 80009f2:	eba8 0800 	sub.w	r8, r8, r0
 80009f6:	e7e7      	b.n	80009c8 <__sflush_r+0xd4>
 80009f8:	dfbffffe 	.word	0xdfbffffe

080009fc <_fflush_r>:
 80009fc:	b538      	push	{r3, r4, r5, lr}
 80009fe:	690b      	ldr	r3, [r1, #16]
 8000a00:	4605      	mov	r5, r0
 8000a02:	460c      	mov	r4, r1
 8000a04:	b913      	cbnz	r3, 8000a0c <_fflush_r+0x10>
 8000a06:	2500      	movs	r5, #0
 8000a08:	4628      	mov	r0, r5
 8000a0a:	bd38      	pop	{r3, r4, r5, pc}
 8000a0c:	b118      	cbz	r0, 8000a16 <_fflush_r+0x1a>
 8000a0e:	6a03      	ldr	r3, [r0, #32]
 8000a10:	b90b      	cbnz	r3, 8000a16 <_fflush_r+0x1a>
 8000a12:	f7ff fe03 	bl	800061c <__sinit>
 8000a16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0f3      	beq.n	8000a06 <_fflush_r+0xa>
 8000a1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000a20:	07d0      	lsls	r0, r2, #31
 8000a22:	d404      	bmi.n	8000a2e <_fflush_r+0x32>
 8000a24:	0599      	lsls	r1, r3, #22
 8000a26:	d402      	bmi.n	8000a2e <_fflush_r+0x32>
 8000a28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000a2a:	f7ff febe 	bl	80007aa <__retarget_lock_acquire_recursive>
 8000a2e:	4628      	mov	r0, r5
 8000a30:	4621      	mov	r1, r4
 8000a32:	f7ff ff5f 	bl	80008f4 <__sflush_r>
 8000a36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000a38:	07da      	lsls	r2, r3, #31
 8000a3a:	4605      	mov	r5, r0
 8000a3c:	d4e4      	bmi.n	8000a08 <_fflush_r+0xc>
 8000a3e:	89a3      	ldrh	r3, [r4, #12]
 8000a40:	059b      	lsls	r3, r3, #22
 8000a42:	d4e1      	bmi.n	8000a08 <_fflush_r+0xc>
 8000a44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000a46:	f7ff feb1 	bl	80007ac <__retarget_lock_release_recursive>
 8000a4a:	e7dd      	b.n	8000a08 <_fflush_r+0xc>

08000a4c <__malloc_lock>:
 8000a4c:	4801      	ldr	r0, [pc, #4]	@ (8000a54 <__malloc_lock+0x8>)
 8000a4e:	f7ff beac 	b.w	80007aa <__retarget_lock_acquire_recursive>
 8000a52:	bf00      	nop
 8000a54:	200001dc 	.word	0x200001dc

08000a58 <__malloc_unlock>:
 8000a58:	4801      	ldr	r0, [pc, #4]	@ (8000a60 <__malloc_unlock+0x8>)
 8000a5a:	f7ff bea7 	b.w	80007ac <__retarget_lock_release_recursive>
 8000a5e:	bf00      	nop
 8000a60:	200001dc 	.word	0x200001dc

08000a64 <__sread>:
 8000a64:	b510      	push	{r4, lr}
 8000a66:	460c      	mov	r4, r1
 8000a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a6c:	f000 f978 	bl	8000d60 <_read_r>
 8000a70:	2800      	cmp	r0, #0
 8000a72:	bfab      	itete	ge
 8000a74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000a76:	89a3      	ldrhlt	r3, [r4, #12]
 8000a78:	181b      	addge	r3, r3, r0
 8000a7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000a7e:	bfac      	ite	ge
 8000a80:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000a82:	81a3      	strhlt	r3, [r4, #12]
 8000a84:	bd10      	pop	{r4, pc}

08000a86 <__swrite>:
 8000a86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a8a:	461f      	mov	r7, r3
 8000a8c:	898b      	ldrh	r3, [r1, #12]
 8000a8e:	05db      	lsls	r3, r3, #23
 8000a90:	4605      	mov	r5, r0
 8000a92:	460c      	mov	r4, r1
 8000a94:	4616      	mov	r6, r2
 8000a96:	d505      	bpl.n	8000aa4 <__swrite+0x1e>
 8000a98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f000 f94c 	bl	8000d3c <_lseek_r>
 8000aa4:	89a3      	ldrh	r3, [r4, #12]
 8000aa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000aaa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000aae:	81a3      	strh	r3, [r4, #12]
 8000ab0:	4632      	mov	r2, r6
 8000ab2:	463b      	mov	r3, r7
 8000ab4:	4628      	mov	r0, r5
 8000ab6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000aba:	f000 b973 	b.w	8000da4 <_write_r>

08000abe <__sseek>:
 8000abe:	b510      	push	{r4, lr}
 8000ac0:	460c      	mov	r4, r1
 8000ac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ac6:	f000 f939 	bl	8000d3c <_lseek_r>
 8000aca:	1c43      	adds	r3, r0, #1
 8000acc:	89a3      	ldrh	r3, [r4, #12]
 8000ace:	bf15      	itete	ne
 8000ad0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000ad2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000ad6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000ada:	81a3      	strheq	r3, [r4, #12]
 8000adc:	bf18      	it	ne
 8000ade:	81a3      	strhne	r3, [r4, #12]
 8000ae0:	bd10      	pop	{r4, pc}

08000ae2 <__sclose>:
 8000ae2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ae6:	f000 b8f7 	b.w	8000cd8 <_close_r>

08000aea <__swbuf_r>:
 8000aea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aec:	460e      	mov	r6, r1
 8000aee:	4614      	mov	r4, r2
 8000af0:	4605      	mov	r5, r0
 8000af2:	b118      	cbz	r0, 8000afc <__swbuf_r+0x12>
 8000af4:	6a03      	ldr	r3, [r0, #32]
 8000af6:	b90b      	cbnz	r3, 8000afc <__swbuf_r+0x12>
 8000af8:	f7ff fd90 	bl	800061c <__sinit>
 8000afc:	69a3      	ldr	r3, [r4, #24]
 8000afe:	60a3      	str	r3, [r4, #8]
 8000b00:	89a3      	ldrh	r3, [r4, #12]
 8000b02:	071a      	lsls	r2, r3, #28
 8000b04:	d501      	bpl.n	8000b0a <__swbuf_r+0x20>
 8000b06:	6923      	ldr	r3, [r4, #16]
 8000b08:	b943      	cbnz	r3, 8000b1c <__swbuf_r+0x32>
 8000b0a:	4621      	mov	r1, r4
 8000b0c:	4628      	mov	r0, r5
 8000b0e:	f000 f82b 	bl	8000b68 <__swsetup_r>
 8000b12:	b118      	cbz	r0, 8000b1c <__swbuf_r+0x32>
 8000b14:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8000b18:	4638      	mov	r0, r7
 8000b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b1c:	6823      	ldr	r3, [r4, #0]
 8000b1e:	6922      	ldr	r2, [r4, #16]
 8000b20:	1a98      	subs	r0, r3, r2
 8000b22:	6963      	ldr	r3, [r4, #20]
 8000b24:	b2f6      	uxtb	r6, r6
 8000b26:	4283      	cmp	r3, r0
 8000b28:	4637      	mov	r7, r6
 8000b2a:	dc05      	bgt.n	8000b38 <__swbuf_r+0x4e>
 8000b2c:	4621      	mov	r1, r4
 8000b2e:	4628      	mov	r0, r5
 8000b30:	f7ff ff64 	bl	80009fc <_fflush_r>
 8000b34:	2800      	cmp	r0, #0
 8000b36:	d1ed      	bne.n	8000b14 <__swbuf_r+0x2a>
 8000b38:	68a3      	ldr	r3, [r4, #8]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	60a3      	str	r3, [r4, #8]
 8000b3e:	6823      	ldr	r3, [r4, #0]
 8000b40:	1c5a      	adds	r2, r3, #1
 8000b42:	6022      	str	r2, [r4, #0]
 8000b44:	701e      	strb	r6, [r3, #0]
 8000b46:	6962      	ldr	r2, [r4, #20]
 8000b48:	1c43      	adds	r3, r0, #1
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	d004      	beq.n	8000b58 <__swbuf_r+0x6e>
 8000b4e:	89a3      	ldrh	r3, [r4, #12]
 8000b50:	07db      	lsls	r3, r3, #31
 8000b52:	d5e1      	bpl.n	8000b18 <__swbuf_r+0x2e>
 8000b54:	2e0a      	cmp	r6, #10
 8000b56:	d1df      	bne.n	8000b18 <__swbuf_r+0x2e>
 8000b58:	4621      	mov	r1, r4
 8000b5a:	4628      	mov	r0, r5
 8000b5c:	f7ff ff4e 	bl	80009fc <_fflush_r>
 8000b60:	2800      	cmp	r0, #0
 8000b62:	d0d9      	beq.n	8000b18 <__swbuf_r+0x2e>
 8000b64:	e7d6      	b.n	8000b14 <__swbuf_r+0x2a>
	...

08000b68 <__swsetup_r>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4b29      	ldr	r3, [pc, #164]	@ (8000c10 <__swsetup_r+0xa8>)
 8000b6c:	4605      	mov	r5, r0
 8000b6e:	6818      	ldr	r0, [r3, #0]
 8000b70:	460c      	mov	r4, r1
 8000b72:	b118      	cbz	r0, 8000b7c <__swsetup_r+0x14>
 8000b74:	6a03      	ldr	r3, [r0, #32]
 8000b76:	b90b      	cbnz	r3, 8000b7c <__swsetup_r+0x14>
 8000b78:	f7ff fd50 	bl	800061c <__sinit>
 8000b7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b80:	0719      	lsls	r1, r3, #28
 8000b82:	d422      	bmi.n	8000bca <__swsetup_r+0x62>
 8000b84:	06da      	lsls	r2, r3, #27
 8000b86:	d407      	bmi.n	8000b98 <__swsetup_r+0x30>
 8000b88:	2209      	movs	r2, #9
 8000b8a:	602a      	str	r2, [r5, #0]
 8000b8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b90:	81a3      	strh	r3, [r4, #12]
 8000b92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b96:	e033      	b.n	8000c00 <__swsetup_r+0x98>
 8000b98:	0758      	lsls	r0, r3, #29
 8000b9a:	d512      	bpl.n	8000bc2 <__swsetup_r+0x5a>
 8000b9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000b9e:	b141      	cbz	r1, 8000bb2 <__swsetup_r+0x4a>
 8000ba0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000ba4:	4299      	cmp	r1, r3
 8000ba6:	d002      	beq.n	8000bae <__swsetup_r+0x46>
 8000ba8:	4628      	mov	r0, r5
 8000baa:	f000 f90d 	bl	8000dc8 <_free_r>
 8000bae:	2300      	movs	r3, #0
 8000bb0:	6363      	str	r3, [r4, #52]	@ 0x34
 8000bb2:	89a3      	ldrh	r3, [r4, #12]
 8000bb4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000bb8:	81a3      	strh	r3, [r4, #12]
 8000bba:	2300      	movs	r3, #0
 8000bbc:	6063      	str	r3, [r4, #4]
 8000bbe:	6923      	ldr	r3, [r4, #16]
 8000bc0:	6023      	str	r3, [r4, #0]
 8000bc2:	89a3      	ldrh	r3, [r4, #12]
 8000bc4:	f043 0308 	orr.w	r3, r3, #8
 8000bc8:	81a3      	strh	r3, [r4, #12]
 8000bca:	6923      	ldr	r3, [r4, #16]
 8000bcc:	b94b      	cbnz	r3, 8000be2 <__swsetup_r+0x7a>
 8000bce:	89a3      	ldrh	r3, [r4, #12]
 8000bd0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000bd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000bd8:	d003      	beq.n	8000be2 <__swsetup_r+0x7a>
 8000bda:	4621      	mov	r1, r4
 8000bdc:	4628      	mov	r0, r5
 8000bde:	f000 f83f 	bl	8000c60 <__smakebuf_r>
 8000be2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000be6:	f013 0201 	ands.w	r2, r3, #1
 8000bea:	d00a      	beq.n	8000c02 <__swsetup_r+0x9a>
 8000bec:	2200      	movs	r2, #0
 8000bee:	60a2      	str	r2, [r4, #8]
 8000bf0:	6962      	ldr	r2, [r4, #20]
 8000bf2:	4252      	negs	r2, r2
 8000bf4:	61a2      	str	r2, [r4, #24]
 8000bf6:	6922      	ldr	r2, [r4, #16]
 8000bf8:	b942      	cbnz	r2, 8000c0c <__swsetup_r+0xa4>
 8000bfa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000bfe:	d1c5      	bne.n	8000b8c <__swsetup_r+0x24>
 8000c00:	bd38      	pop	{r3, r4, r5, pc}
 8000c02:	0799      	lsls	r1, r3, #30
 8000c04:	bf58      	it	pl
 8000c06:	6962      	ldrpl	r2, [r4, #20]
 8000c08:	60a2      	str	r2, [r4, #8]
 8000c0a:	e7f4      	b.n	8000bf6 <__swsetup_r+0x8e>
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	e7f7      	b.n	8000c00 <__swsetup_r+0x98>
 8000c10:	2000001c 	.word	0x2000001c

08000c14 <__swhatbuf_r>:
 8000c14:	b570      	push	{r4, r5, r6, lr}
 8000c16:	460c      	mov	r4, r1
 8000c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	b096      	sub	sp, #88	@ 0x58
 8000c20:	4615      	mov	r5, r2
 8000c22:	461e      	mov	r6, r3
 8000c24:	da0d      	bge.n	8000c42 <__swhatbuf_r+0x2e>
 8000c26:	89a3      	ldrh	r3, [r4, #12]
 8000c28:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000c2c:	f04f 0100 	mov.w	r1, #0
 8000c30:	bf14      	ite	ne
 8000c32:	2340      	movne	r3, #64	@ 0x40
 8000c34:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000c38:	2000      	movs	r0, #0
 8000c3a:	6031      	str	r1, [r6, #0]
 8000c3c:	602b      	str	r3, [r5, #0]
 8000c3e:	b016      	add	sp, #88	@ 0x58
 8000c40:	bd70      	pop	{r4, r5, r6, pc}
 8000c42:	466a      	mov	r2, sp
 8000c44:	f000 f858 	bl	8000cf8 <_fstat_r>
 8000c48:	2800      	cmp	r0, #0
 8000c4a:	dbec      	blt.n	8000c26 <__swhatbuf_r+0x12>
 8000c4c:	9901      	ldr	r1, [sp, #4]
 8000c4e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000c52:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000c56:	4259      	negs	r1, r3
 8000c58:	4159      	adcs	r1, r3
 8000c5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c5e:	e7eb      	b.n	8000c38 <__swhatbuf_r+0x24>

08000c60 <__smakebuf_r>:
 8000c60:	898b      	ldrh	r3, [r1, #12]
 8000c62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000c64:	079d      	lsls	r5, r3, #30
 8000c66:	4606      	mov	r6, r0
 8000c68:	460c      	mov	r4, r1
 8000c6a:	d507      	bpl.n	8000c7c <__smakebuf_r+0x1c>
 8000c6c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000c70:	6023      	str	r3, [r4, #0]
 8000c72:	6123      	str	r3, [r4, #16]
 8000c74:	2301      	movs	r3, #1
 8000c76:	6163      	str	r3, [r4, #20]
 8000c78:	b003      	add	sp, #12
 8000c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c7c:	ab01      	add	r3, sp, #4
 8000c7e:	466a      	mov	r2, sp
 8000c80:	f7ff ffc8 	bl	8000c14 <__swhatbuf_r>
 8000c84:	9f00      	ldr	r7, [sp, #0]
 8000c86:	4605      	mov	r5, r0
 8000c88:	4639      	mov	r1, r7
 8000c8a:	4630      	mov	r0, r6
 8000c8c:	f7ff fdb2 	bl	80007f4 <_malloc_r>
 8000c90:	b948      	cbnz	r0, 8000ca6 <__smakebuf_r+0x46>
 8000c92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c96:	059a      	lsls	r2, r3, #22
 8000c98:	d4ee      	bmi.n	8000c78 <__smakebuf_r+0x18>
 8000c9a:	f023 0303 	bic.w	r3, r3, #3
 8000c9e:	f043 0302 	orr.w	r3, r3, #2
 8000ca2:	81a3      	strh	r3, [r4, #12]
 8000ca4:	e7e2      	b.n	8000c6c <__smakebuf_r+0xc>
 8000ca6:	89a3      	ldrh	r3, [r4, #12]
 8000ca8:	6020      	str	r0, [r4, #0]
 8000caa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cae:	81a3      	strh	r3, [r4, #12]
 8000cb0:	9b01      	ldr	r3, [sp, #4]
 8000cb2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000cb6:	b15b      	cbz	r3, 8000cd0 <__smakebuf_r+0x70>
 8000cb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	f000 f82d 	bl	8000d1c <_isatty_r>
 8000cc2:	b128      	cbz	r0, 8000cd0 <__smakebuf_r+0x70>
 8000cc4:	89a3      	ldrh	r3, [r4, #12]
 8000cc6:	f023 0303 	bic.w	r3, r3, #3
 8000cca:	f043 0301 	orr.w	r3, r3, #1
 8000cce:	81a3      	strh	r3, [r4, #12]
 8000cd0:	89a3      	ldrh	r3, [r4, #12]
 8000cd2:	431d      	orrs	r5, r3
 8000cd4:	81a5      	strh	r5, [r4, #12]
 8000cd6:	e7cf      	b.n	8000c78 <__smakebuf_r+0x18>

08000cd8 <_close_r>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	4d06      	ldr	r5, [pc, #24]	@ (8000cf4 <_close_r+0x1c>)
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4608      	mov	r0, r1
 8000ce2:	602b      	str	r3, [r5, #0]
 8000ce4:	f7ff fb79 	bl	80003da <_close>
 8000ce8:	1c43      	adds	r3, r0, #1
 8000cea:	d102      	bne.n	8000cf2 <_close_r+0x1a>
 8000cec:	682b      	ldr	r3, [r5, #0]
 8000cee:	b103      	cbz	r3, 8000cf2 <_close_r+0x1a>
 8000cf0:	6023      	str	r3, [r4, #0]
 8000cf2:	bd38      	pop	{r3, r4, r5, pc}
 8000cf4:	200001e8 	.word	0x200001e8

08000cf8 <_fstat_r>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	4d07      	ldr	r5, [pc, #28]	@ (8000d18 <_fstat_r+0x20>)
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	4608      	mov	r0, r1
 8000d02:	4611      	mov	r1, r2
 8000d04:	602b      	str	r3, [r5, #0]
 8000d06:	f7ff fb74 	bl	80003f2 <_fstat>
 8000d0a:	1c43      	adds	r3, r0, #1
 8000d0c:	d102      	bne.n	8000d14 <_fstat_r+0x1c>
 8000d0e:	682b      	ldr	r3, [r5, #0]
 8000d10:	b103      	cbz	r3, 8000d14 <_fstat_r+0x1c>
 8000d12:	6023      	str	r3, [r4, #0]
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop
 8000d18:	200001e8 	.word	0x200001e8

08000d1c <_isatty_r>:
 8000d1c:	b538      	push	{r3, r4, r5, lr}
 8000d1e:	4d06      	ldr	r5, [pc, #24]	@ (8000d38 <_isatty_r+0x1c>)
 8000d20:	2300      	movs	r3, #0
 8000d22:	4604      	mov	r4, r0
 8000d24:	4608      	mov	r0, r1
 8000d26:	602b      	str	r3, [r5, #0]
 8000d28:	f7ff fb73 	bl	8000412 <_isatty>
 8000d2c:	1c43      	adds	r3, r0, #1
 8000d2e:	d102      	bne.n	8000d36 <_isatty_r+0x1a>
 8000d30:	682b      	ldr	r3, [r5, #0]
 8000d32:	b103      	cbz	r3, 8000d36 <_isatty_r+0x1a>
 8000d34:	6023      	str	r3, [r4, #0]
 8000d36:	bd38      	pop	{r3, r4, r5, pc}
 8000d38:	200001e8 	.word	0x200001e8

08000d3c <_lseek_r>:
 8000d3c:	b538      	push	{r3, r4, r5, lr}
 8000d3e:	4d07      	ldr	r5, [pc, #28]	@ (8000d5c <_lseek_r+0x20>)
 8000d40:	4604      	mov	r4, r0
 8000d42:	4608      	mov	r0, r1
 8000d44:	4611      	mov	r1, r2
 8000d46:	2200      	movs	r2, #0
 8000d48:	602a      	str	r2, [r5, #0]
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	f7ff fb6c 	bl	8000428 <_lseek>
 8000d50:	1c43      	adds	r3, r0, #1
 8000d52:	d102      	bne.n	8000d5a <_lseek_r+0x1e>
 8000d54:	682b      	ldr	r3, [r5, #0]
 8000d56:	b103      	cbz	r3, 8000d5a <_lseek_r+0x1e>
 8000d58:	6023      	str	r3, [r4, #0]
 8000d5a:	bd38      	pop	{r3, r4, r5, pc}
 8000d5c:	200001e8 	.word	0x200001e8

08000d60 <_read_r>:
 8000d60:	b538      	push	{r3, r4, r5, lr}
 8000d62:	4d07      	ldr	r5, [pc, #28]	@ (8000d80 <_read_r+0x20>)
 8000d64:	4604      	mov	r4, r0
 8000d66:	4608      	mov	r0, r1
 8000d68:	4611      	mov	r1, r2
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	602a      	str	r2, [r5, #0]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	f7ff fafa 	bl	8000368 <_read>
 8000d74:	1c43      	adds	r3, r0, #1
 8000d76:	d102      	bne.n	8000d7e <_read_r+0x1e>
 8000d78:	682b      	ldr	r3, [r5, #0]
 8000d7a:	b103      	cbz	r3, 8000d7e <_read_r+0x1e>
 8000d7c:	6023      	str	r3, [r4, #0]
 8000d7e:	bd38      	pop	{r3, r4, r5, pc}
 8000d80:	200001e8 	.word	0x200001e8

08000d84 <_sbrk_r>:
 8000d84:	b538      	push	{r3, r4, r5, lr}
 8000d86:	4d06      	ldr	r5, [pc, #24]	@ (8000da0 <_sbrk_r+0x1c>)
 8000d88:	2300      	movs	r3, #0
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	602b      	str	r3, [r5, #0]
 8000d90:	f7ff fb58 	bl	8000444 <_sbrk>
 8000d94:	1c43      	adds	r3, r0, #1
 8000d96:	d102      	bne.n	8000d9e <_sbrk_r+0x1a>
 8000d98:	682b      	ldr	r3, [r5, #0]
 8000d9a:	b103      	cbz	r3, 8000d9e <_sbrk_r+0x1a>
 8000d9c:	6023      	str	r3, [r4, #0]
 8000d9e:	bd38      	pop	{r3, r4, r5, pc}
 8000da0:	200001e8 	.word	0x200001e8

08000da4 <_write_r>:
 8000da4:	b538      	push	{r3, r4, r5, lr}
 8000da6:	4d07      	ldr	r5, [pc, #28]	@ (8000dc4 <_write_r+0x20>)
 8000da8:	4604      	mov	r4, r0
 8000daa:	4608      	mov	r0, r1
 8000dac:	4611      	mov	r1, r2
 8000dae:	2200      	movs	r2, #0
 8000db0:	602a      	str	r2, [r5, #0]
 8000db2:	461a      	mov	r2, r3
 8000db4:	f7ff faf5 	bl	80003a2 <_write>
 8000db8:	1c43      	adds	r3, r0, #1
 8000dba:	d102      	bne.n	8000dc2 <_write_r+0x1e>
 8000dbc:	682b      	ldr	r3, [r5, #0]
 8000dbe:	b103      	cbz	r3, 8000dc2 <_write_r+0x1e>
 8000dc0:	6023      	str	r3, [r4, #0]
 8000dc2:	bd38      	pop	{r3, r4, r5, pc}
 8000dc4:	200001e8 	.word	0x200001e8

08000dc8 <_free_r>:
 8000dc8:	b538      	push	{r3, r4, r5, lr}
 8000dca:	4605      	mov	r5, r0
 8000dcc:	2900      	cmp	r1, #0
 8000dce:	d041      	beq.n	8000e54 <_free_r+0x8c>
 8000dd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000dd4:	1f0c      	subs	r4, r1, #4
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	bfb8      	it	lt
 8000dda:	18e4      	addlt	r4, r4, r3
 8000ddc:	f7ff fe36 	bl	8000a4c <__malloc_lock>
 8000de0:	4a1d      	ldr	r2, [pc, #116]	@ (8000e58 <_free_r+0x90>)
 8000de2:	6813      	ldr	r3, [r2, #0]
 8000de4:	b933      	cbnz	r3, 8000df4 <_free_r+0x2c>
 8000de6:	6063      	str	r3, [r4, #4]
 8000de8:	6014      	str	r4, [r2, #0]
 8000dea:	4628      	mov	r0, r5
 8000dec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000df0:	f7ff be32 	b.w	8000a58 <__malloc_unlock>
 8000df4:	42a3      	cmp	r3, r4
 8000df6:	d908      	bls.n	8000e0a <_free_r+0x42>
 8000df8:	6820      	ldr	r0, [r4, #0]
 8000dfa:	1821      	adds	r1, r4, r0
 8000dfc:	428b      	cmp	r3, r1
 8000dfe:	bf01      	itttt	eq
 8000e00:	6819      	ldreq	r1, [r3, #0]
 8000e02:	685b      	ldreq	r3, [r3, #4]
 8000e04:	1809      	addeq	r1, r1, r0
 8000e06:	6021      	streq	r1, [r4, #0]
 8000e08:	e7ed      	b.n	8000de6 <_free_r+0x1e>
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	b10b      	cbz	r3, 8000e14 <_free_r+0x4c>
 8000e10:	42a3      	cmp	r3, r4
 8000e12:	d9fa      	bls.n	8000e0a <_free_r+0x42>
 8000e14:	6811      	ldr	r1, [r2, #0]
 8000e16:	1850      	adds	r0, r2, r1
 8000e18:	42a0      	cmp	r0, r4
 8000e1a:	d10b      	bne.n	8000e34 <_free_r+0x6c>
 8000e1c:	6820      	ldr	r0, [r4, #0]
 8000e1e:	4401      	add	r1, r0
 8000e20:	1850      	adds	r0, r2, r1
 8000e22:	4283      	cmp	r3, r0
 8000e24:	6011      	str	r1, [r2, #0]
 8000e26:	d1e0      	bne.n	8000dea <_free_r+0x22>
 8000e28:	6818      	ldr	r0, [r3, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	6053      	str	r3, [r2, #4]
 8000e2e:	4408      	add	r0, r1
 8000e30:	6010      	str	r0, [r2, #0]
 8000e32:	e7da      	b.n	8000dea <_free_r+0x22>
 8000e34:	d902      	bls.n	8000e3c <_free_r+0x74>
 8000e36:	230c      	movs	r3, #12
 8000e38:	602b      	str	r3, [r5, #0]
 8000e3a:	e7d6      	b.n	8000dea <_free_r+0x22>
 8000e3c:	6820      	ldr	r0, [r4, #0]
 8000e3e:	1821      	adds	r1, r4, r0
 8000e40:	428b      	cmp	r3, r1
 8000e42:	bf04      	itt	eq
 8000e44:	6819      	ldreq	r1, [r3, #0]
 8000e46:	685b      	ldreq	r3, [r3, #4]
 8000e48:	6063      	str	r3, [r4, #4]
 8000e4a:	bf04      	itt	eq
 8000e4c:	1809      	addeq	r1, r1, r0
 8000e4e:	6021      	streq	r1, [r4, #0]
 8000e50:	6054      	str	r4, [r2, #4]
 8000e52:	e7ca      	b.n	8000dea <_free_r+0x22>
 8000e54:	bd38      	pop	{r3, r4, r5, pc}
 8000e56:	bf00      	nop
 8000e58:	200001e4 	.word	0x200001e4

08000e5c <_init>:
 8000e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e5e:	bf00      	nop
 8000e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e62:	bc08      	pop	{r3}
 8000e64:	469e      	mov	lr, r3
 8000e66:	4770      	bx	lr

08000e68 <_fini>:
 8000e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e6a:	bf00      	nop
 8000e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e6e:	bc08      	pop	{r3}
 8000e70:	469e      	mov	lr, r3
 8000e72:	4770      	bx	lr
